/*
  MIT License

  Copyright (c) 2023 thieu-b55

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

#include <SPI.h>
#include <TFT_eSPI.h>
#include "FS.h"
#include "SD.h"
#include "painlessMesh.h"

TFT_eSPI tft = TFT_eSPI();

painlessMesh  mesh;

#define   MESH_PREFIX     "ESP32"
#define   MESH_PASSWORD   "ESP32_pswd"
#define   MESH_PORT        8888

#define TOUCH_INT 25
#define TFT_CS    15
#define TOUCH_CS  4
#define TFT_MISO  12
#define TFT_MOSI  13
#define TFT_SCK   14
#define TFT_DC    2
#define TFT_RST   -1  //(EN ESP32)

#define TOUCH_TRESHOLD    75
#define MAX_LOOP          10

# define BLIJ     0
# define SLAAP    1
# define BOOS     2
# define KOFFIE   3
# define NADENKEN 4
# define PIJL     5

#define LEEG      0
#define ZWART     1
#define WIT       2
#define TEMP      3

#define CALIBRATION_FILE "/TouchCalData1"
#define REPEAT_CAL false

bool pressed;
bool touch_int_bool = false;
bool int_bool = false;
bool verbinding_bool = false;
bool init_bool = true;
bool rnd_ontvangen_bool = false;
bool spel_int_ontvangen_bool = false;
bool ik_begin_bool = false;
bool mijn_beurt_bool = false;
bool spel_keuze_bool = false;
bool tic_tac_toe_bool = false;
bool vier_op_een_rij_bool = false;
bool juiste_volgorde_bool = false;
bool connect_4_bool = false;
bool mastermind_bool = false;
bool pentago_bool = false;
bool super_tic_tac_toe_bool = false;
bool zeeslag_bool = false;
bool smiley_bool = false;
bool othello_bool = false;
bool ingevuld_bool = false;
bool spel_gedaan_bool = false;
bool kleuren_ontvangen_bool = false;
bool score_ontvangen_bool = false;
bool spel_bezig_bool = false;
bool rij_ontvangen_bool = false;
bool veld_gezet_bool = false;
bool uitgestuurd_bool = false;
bool kleuren_gekozen_bool = false;
bool mastermind_kleuren_ontvangen_bool = false;
bool mastermind_rij_gedaan_bool = false;
bool mastermind_rij_ontvangen_bool = false;
bool mastermind_spelen_bool = false;
bool vak_1_leeg_bool = true;
bool vak_2_leeg_bool = true;
bool vak_3_leeg_bool = true;
bool vak_4_leeg_bool = true;
bool vak_1_gekozen_bool = false;
bool vak_2_gekozen_bool = false;
bool vak_3_gekozen_bool = false;
bool vak_4_gekozen_bool = false;
bool pijl_links_bool = false;
bool pijl_rechts_bool = false;
bool controle_bool = false;
bool gedraaid_bool = false;
bool vak_klaar_bool[9];
bool speelvak_bool[10];
bool schip_2_bool = false;
bool schip_3_bool = false;
bool schip_4_bool = false;
bool schip_6_bool = false;
bool schepen_geplaatst_bool = false;
bool zendstring_klaar_bool = false;
bool schepen_ontvangen_bool = false;
bool schepen_verzonden_bool = false;
bool scherm_updaten_bool = false;
bool scherm_klaar_bool = false;
bool schot_ontvangen_bool = false;
bool foute_keuze_bool = false;
bool ik_ben_klaar_bool = false;
bool wisselen_bool = false;
bool smiley_aantal_verzonden_bool = false;
bool smiley_aantal_ontvangen_bool = false;
bool smileys_ontvangen_bool = false;
bool smileys_verzonden_bool = false;
bool smileys_gevonden_bool = false;
bool resultaat_verzonden_bool = false;
bool resultaat_ontvangen_bool = false;
bool othello_controle_array[64];
bool othello_vak_ontvangen_bool = false;
bool zwart_zet_mogelijk_bool;
bool wit_zet_mogelijk_bool;
bool othello_level_ontvangen_bool = false;
bool othello_level_verzonden_bool = false;
bool othello_level_bool = false;

bool x_bool_array[20][20] = {{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                             {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                             {0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0},
                             {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                             {0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0},
                             {0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
                             {0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0},
                             {0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                             {0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0},
                             {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                             {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1}};

bool nul_bool_array[20][20] = {{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                               {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                               {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                               {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                               {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                               {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                               {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                               {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0}};

bool pijlen_array[31][31] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                             {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

bool x_groot_array[50][50] = {{1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                              {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                              {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                              {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                              {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                              {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                              {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}};

bool o_groot_array[50][50] = {{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                              {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                              {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                              {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                              {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
                              {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                              {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}};

bool boot_array[5][31][31] = {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                               
                              {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                               
                              {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                               
                              {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                               
                              {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                               {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}};

bool smileys_array[6][3][28][28] = {{{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         //BLIJ
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}},
                                      
                                      
                                    {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         //SLAAP
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}},
                                      
                                      
                                    {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},      //BOOS   
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},         
                                      {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},         
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},         
                                      {0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0},         
                                      {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0},         
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                      
                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}, 

                                    {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},         //KOFFIE
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},  

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0}},  

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}},


                                    {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         //NADENKEN
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}},

                                    {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},         //PIJL
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

                                     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}};

bool smiley_getallen_array[11][28][28] = {{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                                                                      
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                                           
                                          {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}};
                         
int mijn_punten_int = 0;
int speler_2_punten_int = 0;
int mijn_random_int;
int ontvangen_random_int;
int ontvangen_positie_int;
int kleur_int;
int spel_int;
int aantal_kleuren_int = 3;
int ontvangen_kleur_int = 0;
int score_int = 0;
int ontvangen_score_int;
int cirkel_kleur_int;
int cirkel_waarde_int;
int rij_int;
int keuze_kleur_int;
int mijn_score_int;
int veld_array[10];
int veld_4_array[26];
int kleur_rnd_array[20];
int kleur_array[6] = {TFT_BLACK, TFT_SKYBLUE, TFT_RED, TFT_YELLOW, TFT_GREEN, TFT_MAGENTA};
int veld_connect_array[43];
int gekozen_kleuren_array[4];
int speler_2_kleuren_array[4];
int mastermind_speelveld_array[12][4];
int mastermind_speelrij_int = 0;
int rij_score_array[4];
int pentago_array[37];
int keuzevak_1_kleur_int = TFT_WHITE;
int keuzevak_2_kleur_int = TFT_WHITE;
int keuzevak_3_kleur_int = TFT_WHITE;
int keuzevak_4_kleur_int = TFT_WHITE;
int super_array[10][9];
int speelvak_int;
int vak_2_int;
int vak_3_int;
int vak_4_int;
int vak_6_int;
int schip_2_int;
int schip_3_int;
int schip_4_int;
int honderd_int;
int tien_int;
int een_int;
int ontvangen_int;
int aantal_smileys_int;
int zes_array[6];
int vier_array[2][4];
int drie_array[3][3];
int twee_array[4][2];
int speler_2_zes_array[6];
int speler_2_vier_array[2][4];
int speler_2_drie_array[3][3];
int speler_2_twee_array[4][2];
int score_zes_array[6];
int score_vier_array[2][4];
int score_drie_array[3][3];
int score_twee_array[4][2];
int speler_2_score_zes_array[6];
int speler_2_score_vier_array[2][4];
int speler_2_score_drie_array[3][3];
int speler_2_score_twee_array[4][2];
int speelveld_array[100];
int speler_2_speelveld_array[100];
int mijn_array[100];
int speler_2_array[100];
int mijn_smiley_array[121];
int smiley_aantal_buren_array[121];
int smiley_gedraaid_array[121];
int smiley_controle_array[121];
int speler_2_smiley_array[121];
int smiley_rij_array[100];
int smiley_kolom_array[100];
int smiley_diagonaal_array[100];
int rij_array_teller_int = 0;
int kolom_array_teller_int = 0;
int diagonaal_array_teller_int =0;
int smiley_kolom_int = 0;
int smiley_rij_int = 0;
int smiley_keuze_int;
int smileys_nog_te_doen_int;
int othello_speelveld_array[64];
int othello_vak_ontvangen_int;
int mijn_schijven_int;
int speler_2_schijven_int;

int score_array[8][3] = {{1, 2, 3},
                         {4, 5, 6},
                         {7, 8, 9},
                         {1, 5, 9},
                         {3, 5, 7},
                         {1, 4, 7},
                         {2, 5, 8},
                         {3, 6, 9}};

int positie_array[10][2] = {{0, 0},
                            {89, 69},
                            {169, 69},
                            {249, 69},
                            {89, 149},
                            {169, 149},
                            {249, 149},
                            {89, 229},
                            {169, 229},
                            {249, 229}};

int touch_coor_array[10][4] = {{0, 0, 0, 0},
                               {40, 120, 40, 120},
                               {119, 200, 40, 120},
                               {199, 280, 40, 120},
                               {40, 120, 119, 200},
                               {119, 200, 119, 200},
                               {199, 280, 119, 200},
                               {40, 120, 199, 280},
                               {119, 200, 199, 280},
                               {199, 280, 199, 280}};

int score_4_array[28][4] = {{1, 2, 3, 4},
                            {2, 3, 4, 5},
                            {6, 7, 8, 9},
                            {7, 8, 9, 10},
                            {11, 12, 13, 14},
                            {12, 13, 14, 15},
                            {16, 17, 18, 19},
                            {17, 18, 19, 20},
                            {21, 22, 23, 24},
                            {22, 23, 24, 25},
                            {1, 6, 11, 16},
                            {6, 11, 16, 21},
                            {2, 7, 12, 17},
                            {7, 12, 17, 22},
                            {3, 8, 13, 18},
                            {8, 13, 18, 23},
                            {4, 9, 14, 19},
                            {9, 14, 19, 24},
                            {5, 10, 15, 20},
                            {10, 15, 20, 25},
                            {1, 7, 13, 19},
                            {7, 13, 19, 25},
                            {2, 8, 14, 20},
                            {6, 12, 18, 24},
                            {5, 9, 13, 17},
                            {9, 13, 17, 21},
                            {10, 14, 18, 22},
                            {4, 8, 12, 16}};

int positie_4_array[26][2] = {{0, 0},
                             {40, 20},
                             {105, 20},
                             {170, 20},
                             {234, 20},
                             {298, 20},
                             {40, 84},
                             {105, 84},
                             {170, 84},
                             {234, 84},
                             {298, 84},
                             {40, 149},
                             {105, 149},
                             {170, 149},
                             {234, 149},
                             {298, 149},
                             {40, 214},
                             {105, 214},
                             {170, 214},
                             {234, 214},
                             {298, 214},
                             {40, 278},
                             {105, 278},
                             {170, 278},
                             {234, 278},
                             {298, 278}};

int touch_coor_4_array[26][4] = {{0, 0, 0, 0},
                                 {0, 62, 0, 62},
                                 {62, 127, 0, 62},
                                 {127, 192, 0, 62},
                                 {192, 256, 0, 62},
                                 {256, 320, 0, 62},
                                 {0, 62, 62, 127},
                                 {62, 127, 62, 127},
                                 {127, 192, 62, 127},
                                 {192, 256, 62, 127},
                                 {256, 320, 62, 127},
                                 {0, 62, 127, 192},
                                 {62, 127, 127, 192},
                                 {127, 192, 127, 192},
                                 {192, 256, 127, 192},
                                 {256, 320, 127, 192},
                                 {0, 62, 192, 256},
                                 {62, 127, 192, 256},
                                 {127, 192, 192, 256},
                                 {192, 256, 192, 256},
                                 {256, 320, 192, 256},
                                 {0, 62, 256, 320},
                                 {62, 127, 256, 320},
                                 {127, 192, 256, 320},
                                 {192, 256, 256, 320},
                                 {256, 320, 256, 320}};

int kleurvak_array[6][2] = {{0, 0},
                            {0, 0},
                            {212, 0},
                            {106, 106},
                            {0, 212},
                            {212, 212}};

int touch_coor_kleur_array[6][4] = {{0, 0, 0, 0},
                                    {0, 106, 0, 106},
                                    {212, 319, 0, 106},
                                    {106, 212, 106, 212},
                                    {0, 106, 212, 319},
                                    {212, 319, 212, 319}};

int connect_4_scherm_array[11][4] = {{46, 54, 46, 323},
                                     {91, 54, 91, 323},
                                     {137, 54, 137, 323},
                                     {183, 54, 183, 323},
                                     {229, 54, 229, 323},
                                     {275, 54, 275, 323},
                                     {0, 99, 319, 99},
                                     {0, 144, 319, 144},
                                     {0, 189, 319, 189},
                                     {0, 234, 319, 234},
                                     {0, 279, 319, 279}};

int score_connect_array[69][4] = {{1, 2, 3, 4}, {2, 3, 4, 5}, {3, 4, 5, 6}, {4, 5, 6, 7},
                                  {8, 9, 10, 11}, {9, 10, 11, 12}, {10, 11, 12, 13}, {11, 12, 13, 14},
                                  {15, 16, 17, 18}, {16, 17, 18, 19}, {17, 18, 19, 20}, {18, 19, 20, 21},
                                  {22, 23, 24, 25}, {23, 24, 25, 26}, {24, 25, 26, 27}, {25, 26, 27, 28},
                                  {29, 30, 31, 32}, {30, 31, 32, 33}, {31, 32, 33, 34}, {32, 33, 34, 35},
                                  {36, 37, 38, 39}, {37, 38, 39, 40}, {38, 39, 40, 41}, {39, 40, 41, 42},
                                  {1, 8, 15, 22}, {8, 15, 22, 29}, {15, 22, 29, 36},
                                  {2, 9, 16, 23}, {9, 16, 23, 30}, {16, 23, 30, 37},
                                  {3, 10, 17, 24}, {10, 17, 24, 31}, {17, 24, 31, 38},
                                  {4, 11, 18, 25}, {11, 18, 25, 32}, {18, 25, 32, 39},
                                  {5, 12, 19, 26}, {12, 19, 26, 33}, {19, 26, 33, 40},
                                  {6, 13, 20, 27}, {13, 20, 27, 34}, {20, 27, 34, 41},
                                  {7, 14, 21, 28}, {14, 21, 28, 35}, {21, 28, 35, 42},
                                  {15, 23, 31, 39},
                                  {8, 16, 24, 32}, {16, 24, 32, 40},
                                  {1, 9, 17, 25}, {9, 17, 25, 33}, {17, 25, 33, 41},
                                  {2, 10, 18, 26}, {10, 18, 26, 34}, {18, 26, 34, 42},
                                  {3, 11, 19, 27}, {11, 19, 27, 35},
                                  {4, 12, 20, 28},
                                  {4, 10, 16, 22},
                                  {5, 11, 17, 23}, {11, 17, 23, 29},
                                  {6, 12, 18, 24}, {12, 18, 24, 30}, {18, 24, 30, 36},
                                  {7, 13, 19, 25}, {13, 19, 25, 31}, {19, 25, 31, 37},
                                  {14, 20, 26, 32}, {20, 26, 32, 38},
                                  {21, 27, 33, 39}};

int connect_4_cirkels_array[7] = {22, 68, 114, 160, 206, 252, 298};

int touch_coor_connect_array[8][2] = {{0, 0},
                                      {0, 45},
                                      {45, 91},
                                      {91, 137},
                                      {137, 183},
                                      {183, 229},
                                      {229, 275},
                                      {275, 320}};

int cirkel_x_coor_array[8] = {0, 22, 68, 114, 160, 206, 252, 298};

int cirkel_y_coor_array[7] = {0, 76, 121, 166, 211, 256, 301};

int mastermind_scherm_array[14][4] = {{31, 0, 31, 382},
                                      {63, 0, 63, 382},
                                      {95, 0, 95, 382},
                                      {0, 31, 126, 31},
                                      {0, 63, 126, 63},
                                      {0, 95, 126, 95},
                                      {0, 127, 126, 127},
                                      {0, 159, 126, 159},
                                      {0, 191, 126, 191},
                                      {0, 223, 126, 223},
                                      {0, 255, 126, 255},
                                      {0, 287, 126, 287},
                                      {0, 319, 126, 319},
                                      {0, 351, 126, 351}};

int mastermind_score_array[27][4] = {{184, 0, 184, 382},
                                     {200, 0, 200, 382},
                                     {216, 0, 216, 382},
                                     {184, 15, 216, 15},
                                     {152, 31, 216, 31},
                                     {184, 47, 216, 47},
                                     {152, 63, 216, 63},
                                     {184, 79, 216, 79},
                                     {152, 95, 216, 95},
                                     {184, 111, 216, 111},
                                     {152, 127, 216, 127},
                                     {184, 143, 216, 143},
                                     {152, 159, 216, 159},
                                     {184, 175, 216, 175},
                                     {152, 191, 216, 191},
                                     {184, 207, 216, 207},
                                     {152, 223, 216, 223},
                                     {184, 239, 216, 239},
                                     {152, 255, 216, 255},
                                     {184, 271, 216, 271},
                                     {152, 287, 216, 287},
                                     {184, 303, 216, 303},
                                     {152, 319, 216, 319},
                                     {184, 335, 216, 335},
                                     {152, 351, 216, 351},
                                     {184, 367, 216, 367},
                                     {152, 383, 216, 383}};

int score_weergave_array[12][4][2] = {{{185, 0}, {201, 0}, {185, 16}, {201, 16}},
                                      {{185, 32}, {201, 32}, {185, 48}, {201, 48}},
                                      {{185, 64}, {201, 64}, {185, 80}, {201, 80}},
                                      {{185, 96}, {201, 96}, {185, 112}, {201, 112}},
                                      {{185, 128}, {201, 128}, {185, 144}, {201, 144}},
                                      {{185, 160}, {201, 160}, {185, 176}, {201, 176}},
                                      {{185, 192}, {201, 192}, {185, 208}, {201, 208}},
                                      {{185, 224}, {201, 224}, {185, 240}, {201, 240}},
                                      {{185, 256}, {201, 256}, {185, 272}, {201, 272}},
                                      {{185, 288}, {201, 288}, {185, 304}, {201, 304}},
                                      {{185, 320}, {201, 320}, {185, 336}, {201, 336}},
                                      {{185, 352}, {201, 352}, {185, 368}, {201, 368}}};

int mastermind_kleur_coor_array[6][2] = {{0, 30},
                                         {29, 60},
                                         {59, 90},
                                         {89, 120},
                                         {119, 150},
                                         {149, 180}};

int mijn_kleuren_coor_array[4][4] = {{0, 31, 449, 479},
                                     {32, 63, 449, 479},
                                     {64, 95, 449, 479},
                                     {96, 125, 449, 479}};

int mastermind_speelveld_coor_array[12][4][4] = {{{0, 0, 31, 31}, {32, 0, 63, 31}, {64, 0, 95, 31}, {96, 0, 127, 31}},
                                                 {{0, 32, 31, 63}, {32, 32, 63, 63}, {64, 32, 95, 63}, {96, 32, 127, 63}},
                                                 {{0, 64, 31, 95}, {32, 64, 63, 95}, {64, 64, 95, 95}, {96, 64, 127, 95}},
                                                 {{0, 96, 31, 127}, {32, 96, 63, 127}, {64, 96, 95, 127}, {96, 96, 127, 127}},
                                                 {{0, 128, 31, 159}, {32, 128, 63, 159}, {64, 128, 95, 159}, {96, 128, 127, 159}},
                                                 {{0, 160, 31, 191}, {32, 160, 63, 191}, {64, 160, 95, 191}, {96, 160, 127, 191}},
                                                 {{0, 192, 31, 223}, {32, 192, 63, 223}, {64, 192, 95, 223}, {96, 192, 127, 223}},
                                                 {{0, 224, 31, 255}, {32, 224, 63, 255}, {64, 224, 95, 255}, {96, 224, 127, 255}},
                                                 {{0, 256, 31, 287}, {32, 256, 63, 287}, {64, 256, 95, 287}, {96, 256, 127, 287}},
                                                 {{0, 288, 31, 319}, {32, 288, 63, 319}, {64, 288, 95, 319}, {96, 288, 127, 319}},
                                                 {{0, 320, 31, 351}, {32, 320, 63, 351}, {64, 320, 95, 351}, {96, 320, 127, 351}},
                                                 {{0, 352, 31, 384}, {32, 352, 63, 384}, {64, 352, 95, 384}, {96, 352, 127, 384}}};

int mastermind_kleur_array[6] = {TFT_BLUE, TFT_CYAN, TFT_GREEN, TFT_RED, TFT_MAGENTA, TFT_YELLOW};

int pentago_scherm_array[32][5] = {{20, 0, 158, 0, TFT_RED},
                                   {20, 46, 158, 46, TFT_RED},
                                   {20, 92, 158, 92, TFT_RED},
                                   {20, 138, 158, 138, TFT_RED},
                                   {20, 0 , 20, 138, TFT_RED},
                                   {66, 0, 66, 138, TFT_RED},
                                   {112, 0, 112, 138, TFT_RED},
                                   {158, 0, 158, 138, TFT_RED},
                                   {161, 0, 299, 0, TFT_GREEN},
                                   {161, 46, 299, 46, TFT_GREEN},
                                   {161, 92, 299, 92, TFT_GREEN},
                                   {161, 138, 299, 138, TFT_GREEN},
                                   {161, 0, 161, 138, TFT_GREEN},
                                   {207, 0, 207, 138, TFT_GREEN},
                                   {253, 0, 253, 138, TFT_GREEN},
                                   {299, 0, 299, 138, TFT_GREEN},
                                   {20, 141, 158, 141, TFT_YELLOW},
                                   {20, 187, 158, 187, TFT_YELLOW},
                                   {20, 233, 158, 233, TFT_YELLOW},
                                   {20, 279, 158, 279, TFT_YELLOW},
                                   {20, 141, 20, 279, TFT_YELLOW},
                                   {66, 141, 66, 279, TFT_YELLOW},
                                   {112, 141, 112, 279, TFT_YELLOW},
                                   {158, 141, 158, 279, TFT_YELLOW},
                                   {161, 141, 161, 279, TFT_CYAN},
                                   {207, 141, 207, 279, TFT_CYAN},
                                   {253, 141, 253, 279, TFT_CYAN},
                                   {299, 141, 299, 279, TFT_CYAN},
                                   {161, 141, 299, 141, TFT_CYAN},
                                   {161, 187, 299, 187, TFT_CYAN},
                                   {161, 233, 299, 233, TFT_CYAN},
                                   {161, 279, 299, 279, TFT_CYAN}};

int pentago_touch_array[37][4] = {{0, 0, 0, 0},
                                  {20, 66, 0, 46},
                                  {66, 112, 0, 46},
                                  {112, 158, 0, 46},
                                  {161, 207, 0, 46},
                                  {207, 253, 0, 46},
                                  {253, 299, 0, 46},
                                  {20, 66, 46, 92},
                                  {66, 112, 46, 92},
                                  {112, 158, 46, 92},
                                  {161, 207, 46, 92},
                                  {207, 253, 46, 92},
                                  {253, 299, 46, 92},
                                  {20, 66, 92, 138},
                                  {66, 112, 92, 138},
                                  {112, 158, 92, 138},
                                  {161, 207, 92, 138},
                                  {207, 253, 92, 138},
                                  {253, 299, 92, 138},
                                  {20, 66, 141, 187},
                                  {66, 112, 141, 187},
                                  {112, 158, 141, 187},
                                  {161, 207, 141, 187},
                                  {207, 253, 141, 187},
                                  {253, 299, 141, 187},
                                  {20, 66, 187, 233},
                                  {66, 112, 187, 233},
                                  {112, 158, 187, 233},
                                  {161, 207, 187, 233},
                                  {207, 253, 187, 233},
                                  {253, 299, 187, 233},
                                  {20, 66, 233, 279},
                                  {66, 112, 233, 279},
                                  {112, 158, 233, 279},
                                  {161, 207, 233, 279},
                                  {207, 253, 233, 279},
                                  {253, 299, 233, 279}};

int pentago_positie_array[37][2] = {{0, 0},
                                    {53, 13},
                                    {99, 13},
                                    {145, 13},
                                    {194, 13},
                                    {240, 13},
                                    {286, 13},
                                    {53, 59},
                                    {99, 59},
                                    {145, 59},
                                    {194, 59},
                                    {240, 59},
                                    {286, 59},
                                    {53, 105},
                                    {99, 105},
                                    {145, 105},
                                    {194, 105},
                                    {240, 105},
                                    {286, 105},
                                    {53, 154},
                                    {99, 154},
                                    {145, 154},
                                    {194, 154},
                                    {240, 154},
                                    {286, 154},
                                    {53, 200},
                                    {99, 200},
                                    {145, 200},
                                    {194, 200},
                                    {240, 200},
                                    {286, 200},
                                    {53, 246},
                                    {99, 246},
                                    {145, 246},
                                    {194, 246},
                                    {240, 246},
                                    {286, 246}};

int pentago_keuze_array[5][2] = {{0, 0},
                                 {112, 282},
                                 {161, 282},
                                 {112, 329},
                                 {161, 329}};

int pentago_keuze_touch_array[4][4] = {{112, 158, 282, 326},
                                       {161, 207, 282, 326},
                                       {112, 158, 329, 373},
                                       {161, 207, 329, 373}};

int pijl_touch_array[2][4] = {{36, 96, 300, 354},
                              {222, 282, 300, 354}};

int pentago_score_array[32][5] = {{1, 2, 3, 4, 5},
                                  {2, 3, 4, 5, 6},
                                  {7, 8, 9, 10, 11},
                                  {8, 9, 10, 11, 12},
                                  {13, 14, 15, 16, 17},
                                  {14, 15, 16, 17, 18},
                                  {19, 20, 21, 22, 23},
                                  {20, 21, 22, 23, 24},
                                  {25, 26, 27, 28, 29},
                                  {26, 27, 28, 29, 30},
                                  {31, 32, 33, 34, 35},
                                  {32, 33, 34, 35, 36},
                                  {1, 7, 13, 19, 25},
                                  {7, 13, 19, 25, 31},
                                  {2, 8, 14, 20, 26},
                                  {8, 14, 20, 26, 32},
                                  {3, 9, 15, 21, 27},
                                  {9, 15, 21, 27, 33},
                                  {4, 10, 16, 22, 28},
                                  {10, 16, 22, 28, 34},
                                  {5, 11, 17, 23, 29},
                                  {11, 17, 23, 29, 35},
                                  {6, 12, 18, 24, 30},
                                  {12, 18, 24, 30, 36},
                                  {7, 14, 21, 28, 35},
                                  {2, 9, 16, 23, 30},
                                  {5, 10, 15, 20, 25},
                                  {12, 17, 22, 27, 32},
                                  {1, 8, 15, 22, 29},
                                  {8, 15, 22, 29, 36},
                                  {6, 11, 16, 21, 26},
                                  {11, 16, 21, 26, 31}};

int vak_1_array[8] = {1, 2, 3, 7, 9, 13, 14, 15};
int vak_2_array[8] = {4, 5, 6, 10, 12, 16, 17, 18};
int vak_3_array[8] = {19, 20, 21, 25, 27, 31, 32, 33};
int vak_4_array[8] = {22, 23, 24, 28, 30, 34, 35, 36};
int vak_1_draai_array[8] = {1, 7, 13, 14, 15, 9, 3, 2};
int vak_2_draai_array[8] = {4, 10, 16, 17, 18, 12, 6, 5};
int vak_3_draai_array[8] = {19, 25, 31, 32, 33, 27, 21, 20};
int vak_4_draai_array[8] = {22, 28, 34, 35, 36, 30, 24, 23};

int super_score_array[8][3] = {{0, 1, 2},
                               {3, 4, 5},
                               {6, 7, 8},
                               {0, 4, 8},
                               {2, 4, 6},
                               {0, 3, 6},
                               {1, 4, 7},
                               {2, 5, 8}};

int super_vakken_array[12][5] = {{105, 3, 105, 316, TFT_GREEN},
                                 {106, 3, 106, 316, TFT_GREEN},
                                 {107, 3, 107, 316, TFT_GREEN},
                                 {212, 3, 212, 316, TFT_GREEN},
                                 {213, 3, 213, 316, TFT_GREEN},
                                 {214, 3, 214, 316, TFT_GREEN},
                                 {3, 105, 316, 105, TFT_GREEN},
                                 {3, 106, 316, 106, TFT_GREEN},
                                 {3, 107, 316, 107, TFT_GREEN},
                                 {3, 212, 316, 212, TFT_GREEN},
                                 {3, 213, 316, 213, TFT_GREEN},
                                 {3, 214, 316, 214, TFT_GREEN}};

int super_scherm_array[36][5] = {{35, 3, 35, 102, TFT_WHITE},
                                 {70, 3, 70, 102, TFT_WHITE},
                                 {142, 3, 142, 102, TFT_WHITE},
                                 {177, 3, 177, 102, TFT_WHITE},
                                 {249, 3, 249, 102, TFT_WHITE},
                                 {284, 3, 284, 102, TFT_WHITE},
                                 {35, 110, 35, 209, TFT_WHITE},
                                 {70, 110, 70, 209, TFT_WHITE},
                                 {142, 110, 142, 209, TFT_WHITE},
                                 {177, 110, 177, 209, TFT_WHITE},
                                 {249, 110, 249, 209, TFT_WHITE},
                                 {284, 110, 284, 209, TFT_WHITE},
                                 {35, 217, 35, 316, TFT_WHITE},
                                 {70, 217, 70, 316, TFT_WHITE},
                                 {142, 217, 142, 316, TFT_WHITE},
                                 {177, 217, 177, 316, TFT_WHITE},
                                 {249, 217, 249, 316, TFT_WHITE},
                                 {284, 217, 284, 316, TFT_WHITE},
                                 {3, 35, 102, 35, TFT_WHITE},
                                 {3, 70, 102, 70, TFT_WHITE},
                                 {3, 142, 102, 142, TFT_WHITE},
                                 {3, 177, 102, 177, TFT_WHITE},
                                 {3, 249, 102, 249, TFT_WHITE},
                                 {3, 284, 102, 284, TFT_WHITE},
                                 {110, 35, 209, 35, TFT_WHITE},
                                 {110, 70, 209, 70, TFT_WHITE},
                                 {110, 142, 209, 142, TFT_WHITE},
                                 {110, 177, 209, 177, TFT_WHITE},
                                 {110, 249, 209, 249, TFT_WHITE},
                                 {110, 284, 209, 284, TFT_WHITE},
                                 {217, 35, 316, 35, TFT_WHITE},
                                 {217, 70, 316, 70, TFT_WHITE},
                                 {217, 142, 316, 142, TFT_WHITE},
                                 {217, 177, 316, 177, TFT_WHITE},
                                 {217, 249, 316, 249, TFT_WHITE},
                                 {217, 284, 316, 284, TFT_WHITE}};

int super_vak_gekozen_array[10][3] = {{0, 0, 106},
                                      {107, 0, 106},
                                      {214, 0, 106},
                                      {0, 107, 106},
                                      {107, 107, 106},
                                      {214, 107, 106},
                                      {0, 214, 106},
                                      {107, 214, 106},
                                      {214, 214, 106},
                                      {0, 0, 320}};

int super_touch_array[9][9][4] = {{{0, 35, 0, 35}, {35, 70, 0, 35}, {70, 106, 0, 35},
                                   {0, 35, 35, 70}, {35, 70, 35, 70}, {70, 106, 35, 70},
                                   {0, 35, 70, 106}, {35, 70, 70, 106}, {70, 106, 70, 106}},
                                  {{106, 142, 0, 35}, {142, 177, 0, 35}, {177, 213, 0, 35},
                                   {106, 142, 35, 70}, {142, 177, 35, 70}, {177, 213, 35, 70},
                                   {106, 142, 70, 106}, {142, 177, 70, 106}, {177, 213, 70, 106}},
                                  {{213, 249, 0, 35}, {249, 284, 0, 35}, {284, 320, 0, 35},
                                   {213, 249, 35, 70}, {249, 284, 35, 70}, {284, 320, 35, 70},
                                   {213, 249, 70, 106}, {249, 284, 70, 106}, {284, 320, 70, 106}},
                                  {{0, 35, 106, 142}, {35, 70, 106, 142}, {70, 106, 106, 142},
                                   {0, 35, 142, 177}, {35, 70, 142, 177}, {70, 106, 142, 177},
                                   {0, 35, 177, 213}, {35, 70, 177, 213}, {70, 106, 177, 213}},
                                  {{106, 142, 106, 142}, {142, 177, 106, 142}, {177, 213, 106, 142},
                                   {106, 142, 142, 177}, {142, 177, 142, 177}, {177, 213, 142, 177},
                                   {106, 142, 177, 213}, {142, 177, 177, 213}, {177, 213, 177, 213}},
                                  {{213, 249, 106, 142}, {249, 284, 106, 142}, {284, 320, 106, 142},
                                   {213, 249, 142, 177}, {249, 284, 142, 177}, {284, 320, 142, 177},
                                   {213, 249, 177, 213}, {249, 284, 177, 213}, {284, 320, 177, 213}},
                                  {{0, 35, 213, 249}, {35, 70, 213, 249}, {70, 106, 213, 249},
                                   {0, 35, 249, 284}, {35, 70, 249, 284}, {70, 106, 249, 284},
                                   {0, 35, 284, 320}, {35, 70, 284, 320}, {70, 106, 284, 320}},
                                  {{106, 142, 213, 249}, {142, 177, 213, 249}, {177, 213, 213, 249},
                                   {106, 142, 249, 284}, {142, 177, 249, 284}, {177, 213, 249, 284},
                                   {106, 142, 284, 320}, {142, 177, 284, 320}, {177, 213, 284, 320}},
                                  {{213, 249, 213, 249}, {249, 284, 213, 249}, {284, 320, 213, 249},
                                   {213, 249, 249, 284}, {249, 284, 249, 284}, {284, 320, 249, 284},
                                   {213, 249, 284, 320}, {249, 284, 284, 320}, {284, 320, 284, 320}}};

int super_positie_array[9][9][2] = {{{27, 7}, {62, 7}, {97, 7}, { 27, 42}, {62, 42}, {97, 42}, {27, 77}, {62, 77}, {97, 77}},
                                    {{133, 7}, {169, 7}, {204, 7}, {133, 42}, {169, 42}, {204, 42}, {133, 77}, {169, 77}, {204, 77}},
                                    {{240, 7}, {276, 7}, {311, 7}, {240, 42}, {276, 42}, {311, 42}, {240, 77}, {276, 77}, {311, 77}},
                                    {{27, 113}, {62, 113}, {97, 113}, { 27, 149}, {62, 149}, {97, 149}, {27, 184}, {62, 184}, {97, 184}},
                                    {{133, 113}, {169, 113}, {204, 113}, {133, 149}, {169, 149}, {204, 149}, {133, 184}, {169, 184}, {204, 184}},
                                    {{240, 113}, {276, 113}, {311, 113}, {240, 149}, {276, 149}, {311, 149}, {240, 184}, {276, 184}, {311, 184}},
                                    {{27, 220}, {62, 220}, {97, 220}, { 27, 256}, {62, 256}, {97, 256}, {27, 291}, {62, 291}, {97, 291}},
                                    {{133, 220}, {169, 220}, {204, 220}, {133, 256}, {169, 256}, {204, 256}, {133, 291}, {169, 291}, {204, 291}},
                                    {{240, 220}, {276, 220}, {311, 220}, {240, 256}, {276, 256}, {311, 256}, {240, 291}, {276, 291}, {311, 291}}};

int groot_positie_array[9][2] = {{27, 27}, {134, 27}, {241, 27},
                                 {27, 134}, {134, 134}, {241, 134},
                                 {27, 241}, {134, 241}, {241, 241}};

int zeeslag_scherm_array[18][4] = {{31, 0, 31, 319},
                                   {63, 0, 63, 319},
                                   {95, 0, 95, 319},
                                   {127, 0, 127, 319},
                                   {159, 0, 159, 319},
                                   {191, 0, 191, 319},
                                   {223, 0, 223, 319},
                                   {255, 0, 255, 319},
                                   {287, 0, 287, 319},
                                   {0, 31, 319, 31},
                                   {0, 63, 319, 63},
                                   {0, 95, 319, 95},
                                   {0, 127, 319, 127},
                                   {0, 159, 319, 159},
                                   {0, 191, 319, 191},
                                   {0, 223, 319, 223},
                                   {0, 255, 319, 255},
                                   {0, 287, 319, 287}};

int schepen_array[61][4] = {{10, 330, 136, 330},
                            {10, 351, 136, 351},
                            {10, 330, 10, 351},
                            {31, 330, 31, 351},
                            {52, 330, 52, 351},
                            {73, 330, 73, 351},
                            {94, 330, 94, 351},
                            {115, 330, 115, 351},
                            {136, 330, 136, 351},
                            {10, 362, 94, 362},
                            {10, 383, 94, 383},
                            {10, 362, 10, 383},
                            {31, 362, 31, 383},
                            {52, 362, 52, 383},
                            {73, 362, 73, 383},
                            {94, 362, 94, 383},
                            {115, 362, 199, 362},
                            {115, 383, 199, 383},
                            {115, 362, 115, 383},
                            {136, 362, 136, 383},
                            {157, 362, 157, 383},
                            {178, 362, 178, 383},
                            {199, 362, 199, 383},
                            {10, 394, 73, 394},
                            {10, 415, 73, 415},
                            {10, 394, 10, 415},
                            {31, 394, 31, 415},
                            {52, 394, 52, 415},
                            {73, 394, 73, 415},
                            {94, 394, 157, 394},
                            {94, 415, 157, 415},
                            {94, 394, 94, 415},
                            {115, 394, 115, 415},
                            {136, 394, 136, 415},
                            {157, 394, 157, 415},
                            {178, 394, 241, 394},
                            {178, 415, 241, 415},
                            {178, 394, 178, 415},
                            {199, 394, 199, 415},
                            {220, 394, 220, 415},
                            {241, 394, 241, 415},
                            {10, 426, 52, 426},
                            {10, 447, 52, 447},
                            {10, 426, 10, 447},
                            {31, 426, 31, 447},
                            {52, 426, 52, 447},
                            {73, 426, 115, 426},
                            {73, 447, 115, 447},
                            {73, 426, 73, 447},
                            {94, 426, 94, 447},
                            {115, 426, 115, 447},
                            {136, 426, 178, 426},
                            {136, 447, 178, 447},
                            {136, 426, 136, 447},
                            {157, 426, 157, 447},
                            {178, 426, 178, 447},
                            {199, 426, 241, 426},
                            {199, 447, 241, 447},
                            {199, 426, 199, 447},
                            {220, 426, 220, 447},
                            {241, 426, 241, 447}};

int zeeslag_scherm_touch_array[100][4] = {{0, 31, 0, 31}, {31, 63, 0, 31}, {63, 95, 0, 31}, {95, 127, 0, 31}, {127, 159, 0, 31}, {159, 191, 0, 31}, {191, 223, 0, 31}, {223, 255, 0, 31}, {255, 287, 0, 31}, {287, 320, 0, 31},
                                          {0, 31, 31, 63}, {31, 63, 31, 63}, {63, 95, 31, 63}, {95, 127, 31, 63}, {127, 159, 31, 63}, {159, 191, 31, 63}, {191, 223, 31, 63}, {223, 255, 31, 63}, {255, 287, 31, 63}, {287, 320, 31, 63},
                                          {0, 31, 63, 95}, {31, 63, 63, 95}, {63, 95, 63, 95}, {95, 127, 63, 95}, {127, 159, 63, 95}, {159, 191, 63, 95}, {191, 223, 63, 95}, {223, 255, 63, 95}, {255, 287, 63, 95}, {287, 320, 63, 95},
                                          {0, 31, 95, 127}, {31, 63, 95, 127}, {63, 95, 95, 127}, {95, 127, 95, 127}, {127, 159, 95, 127}, {159, 191, 95, 127}, {191, 223, 95, 127}, {223, 255, 95, 127}, {255, 287, 95, 127}, {287, 320, 95, 127},
                                          {0, 31, 127, 159}, {31, 63, 127, 159}, {63, 95, 127, 159}, {95, 127, 127, 159}, {127, 159, 127, 159}, {159, 191, 127, 159}, {191, 223, 127, 159}, {223, 255, 127, 159}, {255, 287, 127, 159}, {287, 320, 127, 159},
                                          {0, 31, 159, 191}, {31, 63, 159, 191}, {63, 95, 159, 191}, {95, 127, 159, 191}, {127, 159, 159, 191}, {159, 191, 159, 191}, {191, 223, 159, 191}, {223, 255, 159, 191}, {255, 287, 159, 191}, {287, 320, 159, 191},
                                          {0, 31, 191, 223}, {31, 63, 191, 223}, {63, 95, 191, 223}, {95, 127, 191, 223}, {127, 159, 191, 223}, {159, 191, 191, 223}, {191, 223, 191, 223}, {223, 255, 191, 223}, {255, 287, 191, 223}, {287, 320, 191, 223},
                                          {0, 31, 223, 255}, {31, 63, 223, 255}, {63, 95, 223, 255}, {95, 127, 223, 255}, {127, 159, 223, 255}, {159, 191, 223, 255}, {191, 223, 223, 255}, {223, 255, 223, 255}, {255, 287, 223, 255}, {287, 320, 223, 255},
                                          {0, 31, 255, 287}, {31, 63, 255, 287}, {63, 95, 255, 287}, {95, 127, 255, 287}, {127, 159, 255, 287}, {159, 191, 255, 287}, {191, 223, 255, 287}, {223, 255, 255, 287}, {255, 287, 255, 287}, {287, 320, 255, 287},
                                          {0, 31, 287, 320}, {31, 63, 287, 320}, {63, 95, 287, 320}, {95, 127, 287, 320}, {127, 159, 287, 320}, {159, 191, 287, 320}, {191, 223, 287, 320}, {223, 255, 287, 320}, {255, 287, 287, 320}, {287, 320, 287, 320}};

int zeeslag_6_touch_array[6][4] = {{10, 31, 330, 351}, {31, 52, 330, 351}, {52, 73, 330, 351}, {73, 94, 330, 351}, {94, 115, 330, 351}, {115, 136, 330, 351}};

int zeeslag_4_touch_array[2][4][4] = {{{10, 31, 362, 383}, {31, 52, 362, 383}, {52, 73, 362, 383}, {73, 94, 362, 383}},
                                      {{115, 136, 362, 383}, {136, 157, 362, 383}, {157, 178, 362, 383}, {178, 199, 362, 383}}};

int zeeslag_3_touch_array[3][3][4] = {{{10, 31, 394, 415}, {31, 52, 394, 415}, {52, 73, 394, 415}},
                                      {{94, 115, 394, 415}, {115, 136, 394, 415}, {136, 157, 394, 415}},
                                      {{178, 199, 394, 415}, {199, 220, 394, 415}, {220, 241, 394, 415}}};

int zeeslag_2_touch_array[4][2][4] = {{{10, 31, 426, 447}, {31, 52, 426, 447}},
                                      {{73, 94, 426, 447}, {94, 115, 426, 447}},
                                      {{136, 157, 426, 447}, {157, 178, 426, 447}},
                                      {{199, 220, 426, 447}, {220, 241, 426, 447}}};

int zeeslag_scherm_positie_array[100][2] = {{0, 0}, {32, 0}, {64, 0}, {96, 0}, {128, 0}, {160, 0}, {192, 0}, {224, 0}, {256, 0}, {288, 0},
                                            {0, 32}, {32, 32}, {64, 32}, {96, 32}, {128, 32}, {160, 32}, {192, 32}, {224, 32}, {256, 32}, {288, 32},
                                            {0, 64}, {32, 64}, {64, 64}, {96, 64}, {128, 64}, {160, 64}, {192, 64}, {224, 64}, {256, 64}, {288, 64},
                                            {0, 96}, {32, 96}, {64, 96}, {96, 96}, {128, 96}, {160, 96}, {192, 96}, {224, 96}, {256, 96}, {288, 96},
                                            {0, 128}, {32, 128}, {64, 128}, {96, 128}, {128, 128}, {160, 128}, {192, 128}, {224, 128}, {256, 128}, {288, 128},
                                            {0, 160}, {32, 160}, {64, 160}, {96, 160}, {128, 160}, {160, 160}, {192, 160}, {224, 160}, {256, 160}, {288, 160},
                                            {0, 192}, {32, 192}, {64, 192}, {96, 192}, {128, 192}, {160, 192}, {192, 192}, {224, 192}, {256, 192}, {288, 192},
                                            {0, 224}, {32, 224}, {64, 224}, {96, 224}, {128, 224}, {160, 224}, {192, 224}, {224, 224}, {256, 224}, {288, 224},
                                            {0, 256}, {32, 256}, {64, 256}, {96, 256}, {128, 256}, {160, 256}, {192, 256}, {224, 256}, {256, 256}, {288, 256},
                                            {0, 288}, {32, 288}, {64, 288}, {96, 288}, {128, 288}, {160, 288}, {192, 288}, {224, 288}, {256, 288}, {288, 288}};

int zeeslag_6_positie_array[6][2] = {{11, 331}, {32, 331}, {53, 331}, {74, 331}, {95, 331}, {116, 331}};

int zeeslag_4_positie_array[2][4][2] = {{{11, 363}, {32, 363}, {53, 363}, {74, 363}},
                                        {{116, 363}, {137, 363}, {158, 363}, {179, 363}}};

int zeeslag_3_positie_array[3][3][2] = {{{11, 395}, {32, 395}, {53, 395}},
                                        {{95, 395}, {116, 395}, {137, 395}},
                                        {{179, 395}, {200, 395}, {221, 395}}};

int zeeslag_2_positie_array[4][2][2] = {{{11, 427}, {32, 427}},
                                        {{74, 427}, {95, 427}},
                                        {{137, 427}, {158, 427}},
                                        {{200, 427}, {221, 427}}};

int smiley_scherm_array[20][4] = {{29, 0, 29, 319},
                                  {58, 0, 58, 319},
                                  {87, 0, 87, 319},
                                  {116, 0, 116, 319},
                                  {145, 0, 145, 319},
                                  {174, 0, 174, 319},
                                  {203, 0, 203, 319},
                                  {232, 0, 232, 319},
                                  {261, 0, 261, 319},
                                  {290, 0, 290, 319},
                                  {0, 29, 319, 29},
                                  {0, 58, 319, 58},
                                  {0, 87, 319, 87},
                                  {0, 116, 319, 116},
                                  {0, 145, 319, 145},
                                  {0, 174, 319, 174},
                                  {0, 203, 319, 203},
                                  {0, 232, 319, 232},
                                  {0, 261, 319, 261},
                                  {0, 290, 319, 290}};

int smiley_positie_array[121][2] = {{1, 1}, {30, 1}, {59, 1}, {88, 1}, {117, 1}, {146, 1}, { 175, 1}, {204, 1}, {233, 1}, {262, 1}, {291, 1}, 
                                    {1, 30}, {30, 30}, {59, 30}, {88, 30}, {117, 30}, {146, 30}, {175, 30}, {204, 30}, {233, 30}, {262, 30}, {291, 30},
                                    {1, 59}, {30, 59}, {59, 59}, {88, 59}, {117, 59}, {146, 59}, {175, 59}, {204, 59}, {233, 59}, {262, 59}, {291, 59},
                                    {1, 88}, {30, 88}, {59, 88}, {88, 88}, {117, 88}, {146, 88}, {175, 88}, {204, 88}, {233, 88}, {262, 88}, {291, 88},
                                    {1, 117}, {30, 117}, {59, 117}, {88, 117}, {117, 117}, {146, 117}, {175, 117}, {204, 117}, {233, 117}, {262, 117}, {291, 117},
                                    {1, 146}, {30, 146}, {59, 146}, {88, 146}, {117, 146}, {146, 146}, {175, 146}, {204, 146}, {233, 146}, {262, 146}, {291, 146},
                                    {1, 175}, {30, 175}, {59, 175}, {88, 175}, {117, 175}, {146, 175}, {175, 175}, {204, 175}, {233, 175}, {262, 175}, {291, 175},
                                    {1, 204}, {30, 204}, {59, 204}, {88, 204}, {117, 204}, {146, 204}, {175, 204}, {204, 204}, {233, 204}, {262, 204}, {291, 204},
                                    {1, 233}, {30, 233}, {59, 233}, {88, 233}, {117, 233}, {146, 233}, {175, 233}, {204, 233}, {233, 233}, {262, 233}, {291, 233},
                                    {1, 262}, {30, 262}, {59, 262}, {88, 262}, {117, 262}, {146, 262}, {175, 262}, {204, 262}, {233, 262}, {262, 262}, {291, 262},
                                    {1, 291}, {30, 291}, {59, 291}, {88, 291}, {117, 291}, {146, 291}, {175, 291}, {204, 291}, {233, 291}, {262, 291}, {291, 291}};

int smiley_touch_array[125][4] = {{0, 29, 0, 29}, {29, 58, 0, 29}, {58, 87, 0, 29}, {87, 116, 0, 29}, {116, 145, 0, 29}, {145, 174, 0, 29}, {174, 203, 0, 29}, {203, 232, 0, 29}, {232, 261, 0, 29}, {261, 290, 0, 29}, {290, 320, 0, 29},                                                                  
                                  {0, 29, 29, 58}, {29, 58, 29, 58}, {58, 87, 29, 58}, {87, 116, 29, 58}, {116, 145, 29, 58}, {145, 174, 29, 58}, {174, 203, 29, 58}, {203, 232, 29, 58}, {232, 261, 29, 58}, {261, 290, 29, 58}, {290, 320, 29, 58},
                                  {0, 29, 58, 87}, {29, 58, 58, 87}, {58, 87, 58, 87}, {87, 116, 58, 87}, {116, 145, 58, 87}, {145, 174, 58, 87}, {174, 203, 58, 87}, {203, 232, 58, 87}, {232, 261, 58, 87}, {261, 290, 58, 87}, {290, 320, 58, 87},
                                  {0, 29, 87, 116}, {29, 58, 87, 116}, {58, 87, 87, 116}, {87, 116, 87, 116}, {116, 145, 87, 116}, {145, 174, 87, 116}, {174, 203, 87, 116}, {203, 232, 87, 116}, {232, 261, 87, 116}, {261, 290, 87, 116}, {290, 320, 87, 116},
                                  {0, 29, 116, 145}, {29, 58, 116, 145}, {58, 87, 116, 145}, {87, 116, 116, 145}, {116, 145, 116, 145}, {145, 174, 116, 145}, {174, 203, 116, 145}, {203, 232, 116, 145}, {232, 261, 116, 145}, {261, 290, 116, 145}, {290, 320, 116, 145},
                                  {0, 29, 145, 174}, {29, 58, 145, 174}, {58, 87, 145, 174}, {87, 116, 145, 174}, {116, 145, 145, 174}, {145, 174, 145, 174}, {174, 203, 145, 174}, {203, 232, 145, 174}, {232, 261, 145, 174}, {261, 290, 145, 174}, {290, 320, 145, 174},
                                  {0, 29, 174, 203}, {29, 58, 174, 203}, {58, 87, 174, 203}, {87, 116, 174, 203}, {116, 145, 174, 203}, {145, 174, 174, 203}, {174, 203, 174, 203}, {203, 232, 174, 203}, {232, 261, 174, 203}, {261, 290, 174, 203}, {290, 320, 174, 203},
                                  {0, 29, 203, 232}, {29, 58, 203, 232}, {58, 87, 203, 232}, {87, 116, 203, 232}, {116, 145, 203, 232}, {145, 174, 203, 232}, {174, 203, 203, 232}, {203, 232, 203, 232}, {232, 261, 203, 232}, {261, 290, 203, 232}, {290, 320, 203, 232},
                                  {0, 29, 232, 261}, {29, 58, 232, 261}, {58, 87, 232, 261}, {87, 116, 232, 261}, {116, 145, 232, 261}, {145, 174, 232, 261}, {174, 203, 232, 261}, {203, 232, 232, 261}, {232, 261, 232, 261}, {261, 290, 232, 261}, {290, 320, 232, 261},
                                  {0, 29, 261, 290}, {29, 58, 261, 290}, {58, 87, 261, 290}, {87, 116, 261, 290}, {116, 145, 261, 290}, {145, 174, 261, 290}, {174, 203, 261, 290}, {203, 232, 261, 290}, {232, 261, 261, 290}, {261, 290, 261, 290}, {290, 320, 261, 290},
                                  {0, 29, 290, 320}, {29, 58, 290, 320}, {58, 87, 290, 320}, {87, 116, 290, 320}, {116, 145, 290, 320}, {145, 174, 290, 320}, {174, 203, 290, 320}, {203, 232, 290, 320}, {232, 261, 290, 320}, {261, 290, 290, 320}, {290, 320, 290, 320},
                                  {224, 252, 330, 358}, {256, 284, 330, 358}, {288, 316, 330, 358}, {140, 180, 420, 460}};

int smiley_buren_array[121][8] = {{-1, -1, 12, -1, 1, 11, -1, -1}, {-1, -1, 13, 11, 0, 2, 12, -1}, {-1, -1, 14, 12, 1, 3, 13, -1}, {-1, -1, 15, 13, 2, 4, 14, -1}, {-1, -1, 16, 14, 3, 5, 15, -1}, {-1, -1, 17, 15, 4, 6, 16, -1}, 
                                                                   {-1, -1, 18, 16, 5, 7, 17, -1}, {-1, -1, 19, 17, 6, 8, 18, -1}, {-1, -1, 20, 18, 7, 9, 19, -1}, {-1, -1, 21, 19, 8, 10, 20, -1}, {-1, -1, -1, 20, 9, 21, -1, -1},
                                  {-1, -1, 1, 23, 0, 12, 22, -1}, {0, 2, 24, 22, 1, 11, 13, 23}, {1, 3, 25, 23, 2, 12, 14, 24}, {2, 4, 26, 24, 3, 13, 15, 25}, {3, 5, 27, 25, 4, 14, 16, 26}, {4, 6, 28, 26, 5, 15, 17, 27,},
                                                                  {5, 7, 29, 27, 6, 16, 18, 28,}, {6, 8, 30, 28, 7, 17, 19, 29}, {7, 9, 31, 29, 8, 18, 20, 30}, {8, 10, 32, 30, 9, 19, 21, 31}, { -1, -1, 9, 31, 10, 20, 32, -1},
                                  {-1, -1, 12, 34, 11, 23, 33, -1}, {11, 13, 35, 33, 12, 22, 24, 34,}, {12, 14, 36, 34, 13, 23, 25, 35}, {13, 15, 37, 35, 14, 24, 26, 36}, {14, 16, 38, 36, 15, 25, 27, 37}, {15, 17, 39, 37, 16, 26, 28, 38},
                                                                  {16, 18, 40, 38, 17, 27, 29, 39}, {17, 19, 41, 39, 18, 28, 30, 40}, {18, 20, 42, 40, 19, 29, 31, 41}, {19, 21, 43, 41, 20, 30, 32, 42}, {-1, -1, 20, 42, 21, 31, 43, -1},
                                  {-1, -1, 23, 45, 22, 34, 44, -1}, {22, 24, 46, 44, 23, 33, 35, 45}, {23, 25, 47, 45, 24, 34, 36, 46}, {24, 26, 48, 46, 25, 35, 37, 47}, {25, 27, 49, 47, 26, 36, 38, 48}, {26, 28, 50, 48, 27, 37, 39, 49},
                                                                  {27, 29, 51, 49, 28, 38, 40, 50}, {28, 30, 52, 50, 29, 39, 41, 51}, {29, 31, 53, 51, 30, 40, 42, 52}, {30, 32, 54, 52, 31, 41, 43, 53}, {-1, -1, 31, 53, 32, 42, 54, -1},
                                  {-1, -1, 34, 56, 33, 45, 55, -1}, {33, 35, 57, 55, 34, 44, 46, 56}, {34, 36, 58, 56, 35, 45, 47, 57}, {35, 37, 59, 57, 36, 46, 48, 58}, { 36, 38, 60, 58, 37, 47, 49, 59}, {37, 39, 61, 59, 38, 48, 50, 60},
                                                                  {38, 40, 62, 60, 39, 49, 51, 61}, {39, 41, 63, 61, 40, 50, 52, 62}, {40, 42, 64, 62,41, 51, 53, 63}, {41, 43, 65, 63, 42, 52, 54, 64}, {-1, -1, 42, 64, 43, 53, 65, -1},
                                  {-1, -1, 45, 67, 44, 56, 66, -1}, {44, 46, 68, 66, 45, 55, 57, 67}, {45, 47, 69, 67, 46, 56, 58, 68}, {46, 48, 70, 68, 47, 57, 59, 69}, {47, 49, 71, 69, 48, 58, 60, 70}, {48, 50, 72, 70, 49, 59, 61, 71},
                                                                  {49, 51, 73, 71, 50, 60, 62, 72}, {50, 52, 74, 72, 51, 61, 63, 73}, {51, 53, 75, 73, 52, 62, 64, 74}, {52, 54, 76, 74, 53, 63, 65, 75}, {-1, -1, 53, 75, 54, 64, 76, -1},
                                  {-1, -1, 56, 78, 55, 67, 77, -1}, {55, 57, 79, 77, 56, 66, 68, 78}, {56, 58, 80, 78, 57, 67, 69, 79}, {57, 59, 81, 79, 58, 68, 70, 80}, {58, 60, 82, 80, 59, 69, 71, 81}, {59, 61, 83, 81, 60, 70, 72, 82},
                                                                  {60, 62, 84, 82, 61, 71, 73, 83}, {61, 63, 85, 83, 62, 72, 74, 84}, {62, 64, 86, 84, 63, 73, 75, 85}, {63, 65, 87, 85, 64, 74, 76, 86}, {-1, -1, 64, 86, 65, 75, 87, -1},
                                  {-1, -1, 67, 89, 66, 78, 88, -1}, {66, 68, 90, 88, 67, 77, 79, 89}, {67, 69, 91, 89, 68, 78, 80, 90}, {68, 70, 92, 90, 69, 79, 81, 91}, {69, 71, 93, 91, 70, 80, 82, 92}, {70, 72, 94, 92, 71, 81, 83, 93,},
                                                                  {71, 73, 95, 93, 72, 82, 84, 94}, {72, 74, 96, 94, 73, 83, 85, 95}, {73, 75, 97, 95, 74, 84, 86, 96}, {74, 76, 98, 96, 75, 85, 87, 97}, {-1, -1, 75, 97, 76, 86, 98, -1},
                                  {-1, -1, 78, 100, 77, 89, 99, -1}, {77, 79, 101, 99, 78, 88, 90, 100}, {78, 80, 102, 100, 79, 89, 91, 101}, {79, 81, 103, 101, 80, 90, 92, 102}, {80, 82, 104, 102, 81, 91, 93, 103}, {81, 83, 105, 103, 82, 92, 94, 104},
                                                                  {82, 84, 106, 104, 83, 93, 95, 105}, {83, 85, 107, 105, 84, 94, 96, 106}, {84, 86, 108, 106, 85, 95, 97, 107}, {85, 87, 109, 107, 86, 96, 98, 108}, {-1, -1, 86, 108, 87, 97, 109, -1},
                                  {-1, -1, 89, 111, 88, 100, 110, -1}, {88, 90, 112, 110, 89, 99, 101, 111}, {89, 91, 113, 111, 90, 100, 102, 112}, {90, 92, 114, 112, 91, 101, 103, 113}, {91, 93, 115, 113, 92, 102, 104, 114}, {92, 94, 116, 114, 93,  103, 105, 115},
                                                                  {93, 95, 117, 115, 94, 104, 106, 116}, {94, 96, 118, 116, 95, 105, 107, 117}, {95, 97, 119, 117, 96, 106, 108, 118}, {96, 98, 120, 118, 97, 107, 109, 119}, {-1, -1, 97, 119, 98, 108, 120, -1},
                                  {-1, -1, -1, 100, 99, 111, -1, -1}, {-1, -1, 99, 101, 100, 110, 112, -1}, {-1, -1, 100, 102,  101, 111, 113, -1}, {-1, -1, 101, 103, 102, 112, 114, -1}, {-1, -1, 102, 104, 103, 113, 115, -1}, {-1, -1, 103, 105, 104, 114, 116, -1},
                                                                  {-1, -1, 104, 106, 105, 115, 117, -1}, {-1, -1, 105, 107, 106, 116, 118, -1}, {-1, -1, 106, 108, 107, 117, 119, -1}, {-1, -1, 107, 109, 108, 118, 120, -1}, {-1, -1, -1, 108, 109, 119, -1, -1}};                                                          
                                        
int aantal_smileys_touch_array[13][4] = {{1, 61, 40, 80}, {61, 109, 40, 80}, {109, 167, 40, 80}, {167, 225, 40, 80}, {225, 283, 40, 80},
                                         {1, 61, 80, 120}, {61, 109, 80, 120}, {109, 167, 80, 120}, {167, 225, 80, 120}, {225, 283, 80, 120},
                                         {0, 160, 180, 220}, {0, 160, 220, 260}, {140, 180, 420, 460}};

int smiley_rij_min_max_array[11][2] = {{0, 10}, {11, 21}, {22, 32}, {33, 43}, {44, 54}, {55, 65}, {66, 76}, {77, 87}, {88, 98}, {99, 109}, {110, 120}};

int smiley_kolom_min_max_array[11][2] = {{0, 110}, {1, 111}, {2, 112}, {3, 113}, {4, 114}, {5, 115}, {6, 116}, {7, 117}, {8, 118}, {9, 119}, {10, 120}};                                         

int othello_scherm_array[14][4] = {{39, 0, 39, 318}, {79, 0, 79, 318}, {119, 0, 119, 318}, {159, 0, 159, 318}, {199, 0, 199, 318}, {239, 0, 239, 318}, {279, 0, 279, 318},
                                   {0, 39, 319, 39}, {0, 79, 319, 79}, {0, 119, 319, 119}, {0, 159, 319, 159}, {0, 199, 319, 199}, {0, 239, 319, 239}, {0, 279, 319, 279}};

int othello_touch_array[65][4] =  {{0, 39, 0, 39}, {39, 79, 0, 39}, {79, 119, 0, 39}, {119, 159, 0, 39}, {159, 199, 0, 39}, {199, 239, 0, 39}, {239, 279, 0, 39}, {279, 319, 0, 39},   
                                   {0, 39, 39, 79}, {39, 79, 39, 79}, {79, 119, 39, 79}, {119, 159, 39, 79}, {159, 199, 39, 79}, {199, 239, 39, 79}, {239, 279, 39, 79}, {279, 319, 39, 79},
                                   {0, 39, 79, 119}, {39, 79, 79, 119}, {79, 119, 79, 119}, {119, 159, 79, 119}, {159, 199, 79, 119}, {199, 239, 79, 119}, {239, 279, 79, 119}, {279, 319, 79, 119},
                                   {0, 39, 119, 159}, {39, 79, 119, 159}, {79, 119, 119, 159}, {119, 159, 119, 159}, {159, 199, 119, 159}, {199, 239, 119, 159}, {239, 279, 119, 159}, {279, 319, 119, 159},
                                   {0, 39, 159, 199}, {39, 79, 159, 199}, {79, 119, 159, 199}, {119, 159, 159, 199}, {159, 199, 159, 199}, {199, 239, 159, 199}, {239, 279, 159, 199}, {279, 319, 159, 199},
                                   {0, 39, 199, 239}, {39, 79, 199, 239}, {79, 119, 199, 239}, {119, 159, 199, 239}, {159, 199, 199, 239}, {199, 239, 199, 239}, {239, 279, 199, 239}, {279, 319, 199, 239},
                                   {0, 39, 239, 279}, {39, 79, 239, 279}, {79, 119, 239, 279}, {119, 159, 239, 279}, {159, 199, 239, 279}, {199, 239, 239, 279}, {239, 279, 239, 279}, {279, 319, 239, 279},
                                   {0, 39, 279, 319}, {39, 79, 279, 319}, {79, 119, 279, 319}, {119, 159, 279, 319}, {159, 199, 279, 319}, {199, 239, 279, 319}, {239, 279, 279, 319}, {279, 319, 279, 319},
                                   {140, 220, 330, 370}};                            

int othello_buren_array[64][8] =   {{-1, -1, -1, 1, 9, 8, -1, -1}, {-1, -1, -1, 2, 10, 9, 8, 0}, {-1, -1, -1, 3, 11, 10, 9, 1}, {-1, -1, -1, 4, 12, 11, 10, 2}, 
                                                                   {-1, -1, -1, 5, 13, 12, 11, 3}, {-1, -1, -1, 6, 14, 13, 12, 4}, {-1, -1, -1, 7, 15, 14, 13, 5}, {-1, -1, -1, -1, -1, 15, 14, 6},
                                    {-1, 0, 1, 9, 17, 16, -1, -1}, {0, 1, 2, 10, 18, 17, 16, 8}, {1, 2, 3, 11, 19, 18, 17, 9}, {2, 3, 4, 12, 20, 19, 18, 10}, 
                                                                   {3, 4, 5, 13, 21, 20, 19, 11}, {4, 5, 6, 14, 22, 21, 20, 12}, {5, 6, 7, 15, 23, 22, 21, 13}, {6, 7, -1, -1, -1, 23, 22, 14},
                                    {-1, 8, 9, 17, 25, 24, -1, -1}, {8, 9, 10, 18, 26, 25, 24, 16}, {9, 10, 11, 19, 27, 26, 25, 17}, {10, 11, 12, 20, 28, 27, 26, 18}, 
                                                                    {11, 12, 13, 21, 29, 28, 27, 19}, {12, 13, 14, 22, 30, 29, 28, 20}, {13, 14, 15, 23, 31, 30, 29, 21}, {14, 15, -1, -1, -1, 31, 30, 22},
                                    {-1, 16, 17, 25, 33, 32, -1, -1}, {16, 17, 18, 26, 34, 33, 32, 24}, {17, 18, 19, 27, 35, 34, 33, 25}, {18, 19, 20, 28, 36, 35, 34, 26}, 
                                                                      {19, 20, 21, 29, 37, 36, 35, 27}, {20, 21, 22, 30, 38, 37, 36, 28}, {21, 22, 23, 31, 39, 38, 37, 29}, {22, 23, -1, -1, -1, 39, 38, 30},
                                    {-1, 24, 25, 33, 41, 40, -1, -1}, {24, 25, 26, 34, 42, 41, 40, 32}, {25, 26, 27, 35, 43, 42, 41, 33}, {26, 27, 28, 36, 44, 43, 42, 34}, 
                                                                      {27, 28, 29, 37, 45, 44, 43, 35}, {28, 29, 30, 38, 46, 45, 44, 36}, {29, 30, 31, 39, 47, 46, 45, 37}, {30, 31, -1, -1, -1, 47, 46, 38},
                                    {-1, 32, 33, 41, 49, 48, -1, -1}, {32, 33, 34, 42, 50, 49, 48, 40}, {33, 34, 35, 43, 51, 50, 49, 41}, {34, 35, 36, 44, 52, 51, 50, 42}, 
                                                                      {35, 36, 37, 45, 53, 52, 51, 43}, {36, 37, 38, 46, 54, 53, 52, 44}, {37, 38, 39, 47, 55, 54, 53, 45}, {38, 39, -1, -1, -1, 55, 54, 46},
                                    {-1, 40, 41, 49, 57, 56, -1, -1}, {40, 41, 42, 50, 58, 57, 56, 48}, {41, 42, 43, 51, 59, 58, 57, 49}, {42, 43, 44, 52, 60, 59, 58, 50}, 
                                                                      {43, 44, 45, 53, 61, 60, 59, 51}, {44, 45, 46, 54, 62, 61, 60, 52}, {45, 46, 47, 55, 63, 62, 61, 53}, {46, 47, -1, -1, -1, 63, 62, 54},
                                    {-1, 48, 49, 57, -1, -1, -1, -1}, {48, 49, 50, 58, -1, -1, -1, 56}, {49, 50, 51, 59, -1, -1, -1, 57}, {50, 51, 52, 60, -1, -1, -1, 58}, {51, 52, 53, 61, -1, -1, -1, 59},
                                                                      {52, 53, 54, 62, -1, -1, -1, 60}, {53, 54, 55, 63, -1, -1, -1, 61}, {54, 55, -1, -1, -1, -1, -1, 62}}; 

int othello_positie_array[64][2] = {{0, 0}, {40, 0}, {80, 0}, {120, 0}, {160, 0}, {200, 0}, {240, 0}, {280, 0},
                                   {0, 40}, {40, 40}, {80, 40}, {120, 40}, {160, 40}, {200, 40}, {240, 40}, {280, 40},
                                   {0, 80}, {40, 80}, {80, 80}, {120, 80}, {160, 80}, {200, 80}, {240, 80}, {280, 80},
                                   {0, 120}, {40, 120}, {80, 120}, {120, 120}, {160, 120}, {200, 120}, {240, 120}, {280, 120},
                                   {0, 160}, {40, 160}, {80, 160}, {120, 160}, {160, 160}, {200, 160}, {240, 160}, {280, 160},
                                   {0, 200}, {40, 200}, {80, 200}, {120, 200}, {160, 200}, {200, 200}, {240, 200}, {280, 200},
                                   {0, 240}, {40, 240}, {80, 240}, {120, 240}, {160, 240}, {200, 240}, {240, 240}, {280, 240},
                                   {0, 280}, {40, 280}, {80, 280}, {120, 280}, {160, 280}, {200, 280}, {240, 280}, {280, 280}};

int othello_level_touch_array[3][4] = {{0, 320, 40, 80}, {0, 320, 80, 120}, {140, 190, 420, 460}};                                   
                          
uint16_t t_x;
uint16_t t_y;
unsigned long touch_update_long;
unsigned long wachten_long;

String zend_string = "                        ";
String ontvangen_schepen_string = "                                                                                     ";
String smiley_resultaat_string = "               ";

void touch_calibrate();
void touch();
void dummy();
void tic_tac_toe_scherm();
void controle();
void ingevuld();
void vier_op_een_rij_scherm();
void controle_4();
void ingevuld_4();
void teken_x(int, int);
void teken_o(int, int);
void juiste_volgorde_scherm();
void connect_4_scherm();
void connect_4_cirkels();
void controle_connect_4();
void ingevuld_connect_4();
void kleur_keuze();
void gekozen_kleur();
void gekozen_kleuren();
void mastermind_scherm();
void speelkleuren();
void pentago_scherm();
void teken_keuzevak_1();
void teken_keuzevak_2();
void teken_keuzevak_3();
void teken_keuzevak_4();
void teken_keuzevakken();
void teken_pijl_rechts();
void teken_pijl_links();
void teken_pijlen();
void wis_keuzevakken();
void wis_vak_1();
void wis_vak_2();
void wis_vak_3();
void wis_vak_4();
void draai_1_links();
void draai_2_links();
void draai_3_links();
void draai_4_links();
void draai_1_rechts();
void draai_2_rechts();
void draai_3_rechts();
void draai_4_rechts();
void vul_vak_1();
void vul_vak_2();
void vul_vak_3();
void vul_vak_4();
void pentago_controle();
void draai_vak();
void pentago_ingevuld();
void super_tic_tac_toe_scherm();
void super_teken_speelvakken();
void super_speelvak();
void reset_vakken();
void controle_super(int);
void teken_groot_x(int, int);
void teken_groot_o(int, int);
void enable_touch_int();
void wacht_25();
void wacht_250();
void wacht_500();
void wacht_1s();
void wacht_2s();
void wacht_5s();
void wacht_10s();
void wacht_20s();
void uitsturen();
void receivedCallback( uint32_t from, String &msg );
void newConnectionCallback(uint32_t);
void changedConnectionCallback();
void nodeTimeAdjustedCallback(int32_t);
void zeeslag_startscherm();
void zeeslag_scherm();
void zeeslag_schepen();
void teken_schip(int, int, int);
void schepen_geplaatst_controle();
void zeeslag_scherm_update();
void schrijf_zendstring();
void speler_2_invullen();
void omrekenen(int);
void mijn_schepen();
void speler_2_schepen();
void mijn_score();
void speler_2_score();
void smiley_aantal_ik_begin();
void smiley_aantal_ik_begin_niet();
void smiley_scherm();
void teken_smileys(int, int, int, int, int, int);
void smiley_teken_getallen(int, int, int);
void smiley_bereken_buren();
void rij_kolom_array_wissen();
void vul_vak(int, int);
void rij_plus(int);
void rij_min(int);
void kolom_plus(int);
void kolom_min(int);
void diagonaal(int);
void smiley_teken_aantal(int);
void smiley_teken_keuze_int();
void smiley_teken_controle(int);
void smiley_teken_controle_leeg(int);
void leeg_test(int);
void othello_scherm();
void zoek_wit();
void zoek_zwart();
void wis_keuze_cirkels();
void zwart_zet_mogelijk();
void wit_zet_mogelijk();
void van_zwart_naar_wit(int, int);
void van_wit_naar_zwart(int, int);
void wit_omdraaien(int);
void zwart_omdraaien(int);
void othello_teken_aantal(int , int);
void othello_level_keuzescherm();
void othello_wacht_op_level_scherm();

void setup() {
  delay(2500);
  Serial.begin(115200);
  pinMode(TOUCH_INT, INPUT);
  pinMode(TFT_CS, OUTPUT);
  pinMode(TOUCH_CS, OUTPUT);
  digitalWrite(TFT_CS, HIGH);
  digitalWrite(TOUCH_CS, HIGH);
  tft.init();
  tft.setTextSize(1);
  tft.setRotation(2);
  touch_calibrate();
  mesh.setDebugMsgTypes( ERROR | STARTUP );
  mesh.init( MESH_PREFIX, MESH_PASSWORD, MESH_PORT );
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(4);
  tft.setTextColor(TFT_YELLOW);
  tft.setCursor(10, 60);
  tft.print("ESP32");
  tft.setCursor(10, 100);
  tft.print("SPELLETJES");
  tft.setTextFont(2);
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(10, 140);
  tft.print("Wachten op verbinding");
  tft.setCursor(10, 460);
  tft.print("thieu-b55   mei 2023");
  while (!verbinding_bool) {
    mesh.update();
  }
  mijn_random_int = esp_random();
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(4);
  tft.setTextColor(TFT_GREEN);
  tft.setCursor(130, 60);
  tft.print("Druk");
  tft.setCursor(78, 100);
  tft.print("op het scherm");
  tft.setCursor(55, 140);
  tft.print("om verder te gaan");
  attachInterrupt(digitalPinToInterrupt(TOUCH_INT), touch, FALLING);
}

void loop() {
  while (init_bool) {
    if ((touch_int_bool) && (!rnd_ontvangen_bool)) {
      touch_int_bool = false;
      zend_string = String(mijn_random_int);
      uitsturen();
    }
    if (rnd_ontvangen_bool) {
      init_bool = false;
      spel_keuze_bool = true;
      if (mijn_random_int > ontvangen_random_int) {
        ik_begin_bool = true;
        mijn_beurt_bool = true;
      }
    }
    if (!init_bool) {
      attachInterrupt(digitalPinToInterrupt(TOUCH_INT), dummy, FALLING);
      detachInterrupt(digitalPinToInterrupt(TOUCH_INT));
      attachInterrupt(digitalPinToInterrupt(TOUCH_INT), touch, FALLING);
    }
    mesh.update();
  }
  if ((ik_begin_bool) && (spel_keuze_bool)) {
    tft.fillScreen(TFT_BLACK);
    tft.setTextFont(2);
    tft.setTextColor(TFT_WHITE);
    tft.setCursor(10, 20);
    tft.print("Tic Tac Toe");
    tft.setCursor(10, 60);
    tft.print("Vier Op Een Rij");
    tft.setCursor(10, 100);
    tft.print("Juiste Volgorde");
    tft.setCursor(10, 140);
    tft.print("Connect 4");
    tft.setCursor(10, 180);
    tft.print("Mastermind");
    tft.setCursor(10, 220);
    tft.print("Pentago");
    tft.setCursor(10, 260);
    tft.print("Super Tic Tac Toe");
    tft.setCursor(10, 300);
    tft.print("Zeeslag");
    tft.setCursor(10, 340);
    tft.print("Smileys");
    tft.setCursor(10, 380);
    tft.print("Othello");
    while ((!tic_tac_toe_bool) && (!vier_op_een_rij_bool) && (!juiste_volgorde_bool) && (!connect_4_bool) && (!mastermind_bool) && (!pentago_bool) && (!super_tic_tac_toe_bool) && (!zeeslag_bool) && (!smiley_bool) && (!othello_bool)) {
      while (!touch_int_bool) {
        mesh.update();
      }
      touch_update_long = millis();
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 0) && (t_y < 40)) {
        tic_tac_toe_bool = true;
        spel_keuze_bool = false;
        spel_int = 90;
        zend_string = String(spel_int);
        uitsturen();
        tic_tac_toe_scherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 39) && (t_y < 80)) {
        vier_op_een_rij_bool = true;
        spel_keuze_bool = false;
        spel_int = 91;
        zend_string = String(spel_int);
        uitsturen();
        vier_op_een_rij_scherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 79) && (t_y < 120)) {
        juiste_volgorde_bool = true;
        spel_keuze_bool = false;
        spel_int = 92;
        zend_string = String(spel_int);
        uitsturen();
        juiste_volgorde_scherm();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 119) && (t_y < 160)) {
        connect_4_bool = true;
        spel_keuze_bool = false;
        spel_int = 93;
        zend_string = String(spel_int);
        uitsturen();
        connect_4_scherm();
        cirkel_kleur_int = TFT_RED;
        connect_4_cirkels();
        cirkel_waarde_int = 3;
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 159) && (t_y < 200)) {
        mastermind_bool = true;
        spel_keuze_bool = false;
        spel_int = 94;
        zend_string = String(spel_int);
        uitsturen();
        mastermind_scherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 199) && (t_y < 240)) {
        pentago_bool = true;
        spel_keuze_bool = false;
        spel_int = 95;
        zend_string = String(spel_int);
        uitsturen();
        pentago_scherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 239) && (t_y > 239) && (t_y < 280)) {
        super_tic_tac_toe_bool = true;
        spel_keuze_bool = false;
        spel_int = 96;
        zend_string = String(spel_int);
        uitsturen();
        super_tic_tac_toe_scherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 279) && (t_y < 320)) {
        zeeslag_bool = true;
        spel_keuze_bool = false;
        spel_int = 97;
        zend_string = String(spel_int);
        uitsturen();
        zeeslag_startscherm();
        wacht_2s();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 319) && (t_y < 360)) {
        smiley_bool = true;
        spel_keuze_bool = false;
        spel_int = 98;
        zend_string = String(spel_int);
        uitsturen();
        smiley_aantal_ik_begin();
        enable_touch_int();
      }
      if ((t_x > 0) && (t_x < 320) && (t_y > 359) && (t_y < 400)) {
        othello_bool = true;
        spel_keuze_bool = false;
        spel_int = 99;
        zend_string = String(spel_int);
        uitsturen();
        othello_level_keuzescherm();
        wacht_2s();
        enable_touch_int();
      }
    }
  }
  if ((!ik_begin_bool) && (rnd_ontvangen_bool) && (spel_keuze_bool)) {
    tft.fillScreen(TFT_BLACK);
    tft.setTextFont(2);
    tft.setTextColor(TFT_WHITE);
    tft.setCursor(0, 50);
    tft.print("Effe geduld");
    tft.setCursor(0, 75);
    tft.print("Spelletje wordt gekozen");
    while (!spel_int_ontvangen_bool) {
      mesh.update();
    }
    spel_keuze_bool = false;
    if (spel_int == 90) {
      tic_tac_toe_scherm();
      enable_touch_int();
    }
    if (spel_int == 91) {
      vier_op_een_rij_scherm();
      enable_touch_int();
    }
    if (spel_int == 92) {
      juiste_volgorde_scherm();
      enable_touch_int();
    }
    if (spel_int == 93) {
      connect_4_scherm();
      enable_touch_int();
    }
    if (spel_int == 94) {
      mastermind_scherm();
      enable_touch_int();
    }
    if (spel_int == 95) {
      pentago_scherm();
      enable_touch_int();
    }
    if (spel_int == 96) {
      super_tic_tac_toe_scherm();
      enable_touch_int();
    }
    if (spel_int == 97) {
      zeeslag_startscherm();
      enable_touch_int();
    }
    if (spel_int == 98) {
      smiley_aantal_ik_begin_niet();
      enable_touch_int();
    }
    if(spel_int == 99){
      othello_wacht_op_level_scherm(); 
      enable_touch_int();
    }
  }

/*
   TIC TAC TOE
*/

  if (spel_int == 90) {
    if ((touch_int_bool == true) && (mijn_beurt_bool == true)) {
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      }
      touch_int_bool = false;
      int_bool = true;
      touch_update_long = millis();
      for (int x = 1; x < 10; x++) {
        if ((t_x > touch_coor_array[x][0]) && (t_x < touch_coor_array[x][1]) && (t_y > touch_coor_array[x][2]) && (t_y < touch_coor_array[x][3])) {
          if (veld_array[x] == 0) {
            if (ik_begin_bool) {
              teken_o(positie_array[x][0], positie_array[x][1]);
              veld_array[x] = 3;
            }
            else {
              teken_x(positie_array[x][0], positie_array[x][1]);
              veld_array[x] = 5;
            }
            zend_string = String(x);
            uitsturen();
            mijn_beurt_bool = mijn_beurt_bool ^ 1;
            if (mijn_beurt_bool) {
              tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
            }
            else {
              tft.fillRect(0, 469, 319, 10, TFT_BLACK);
            }
            controle();
            if (!spel_gedaan_bool) {
              ingevuld();
            }
          }
        }
      }
    }
  }

/*
   VIER OP EEN RIJ
*/

  if (spel_int == 91) {
    if ((touch_int_bool == true) && (mijn_beurt_bool == true)) {
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      }
      touch_int_bool = false;
      int_bool = true;
      touch_update_long = millis();
      for (int x = 1; x < 26; x++) {
        if ((t_x > touch_coor_4_array[x][0]) && (t_x < touch_coor_4_array[x][1]) && (t_y > touch_coor_4_array[x][2]) && (t_y < touch_coor_4_array[x][3])) {
          if (veld_4_array[x] == 0) {
            if (ik_begin_bool) {
              teken_o(positie_4_array[x][0], positie_4_array[x][1]);
              veld_4_array[x] = 3;
            }
            else {
              teken_x(positie_4_array[x][0], positie_4_array[x][1]);
              veld_4_array[x] = 5;
            }
            zend_string = String(x);
            uitsturen();
            mijn_beurt_bool = mijn_beurt_bool ^ 1;
            if (mijn_beurt_bool) {
              tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
            }
            else {
              tft.fillRect(0, 469, 319, 10, TFT_BLACK);
            }
            controle_4();
            if (!spel_gedaan_bool) {
              ingevuld_4();
            }
          }
        }
      }
    }
  }

/*
   MEMORY SPEL
*/

  if (spel_int == 92) {
    while (1) {
      score_ontvangen_bool = false;
      kleuren_ontvangen_bool = false;
      if (ik_begin_bool) {
        zend_string = "";
        randomSeed(esp_random());
        for (int x = 0; x < 15; x++) {
          int tmp_int = random(1, 6);
          kleur_rnd_array[x] = tmp_int;
          zend_string = zend_string + String(tmp_int);
        }
        spel_bezig_bool = true;
        uitsturen();
        wacht_1s();
      }
      if (!ik_begin_bool) {
        while (!kleuren_ontvangen_bool) {
          mesh.update();
        }
        spel_bezig_bool = true;
        wacht_1s();
      }
      for (int x = 0; x < aantal_kleuren_int; x++) {
        tft.fillRoundRect(kleurvak_array[kleur_rnd_array[x]][0], kleurvak_array[kleur_rnd_array[x]][1], 106, 106, 0, kleur_array[kleur_rnd_array[x]]);
        wacht_1s();
        tft.fillRoundRect(kleurvak_array[kleur_rnd_array[x]][0], kleurvak_array[kleur_rnd_array[x]][1], 106, 106, 0, TFT_BLACK);
        tft.drawRoundRect(kleurvak_array[kleur_rnd_array[x]][0], kleurvak_array[kleur_rnd_array[x]][1], 106, 106, 0, kleur_array[kleur_rnd_array[x]]);
        wacht_500();
      }
      int y = 0;
      while (y < aantal_kleuren_int) {
        score_int = 1;
        if (touch_int_bool) {
          t_x = 0;
          t_y = 0;
          int max_loop = 0;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          while ((!pressed) && (max_loop < MAX_LOOP)) {
            max_loop++;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          }
          touch_int_bool = false;
          int_bool = true;
          touch_update_long = millis();
          for (int x = 1; x < 6; x++) {
            if ((t_x > touch_coor_kleur_array[x][0]) && (t_x < touch_coor_kleur_array[x][1]) && (t_y > touch_coor_kleur_array[x][2]) && (t_y < touch_coor_kleur_array[x][3])) {
              if (x == kleur_rnd_array[y]) {
                tft.fillRoundRect(kleurvak_array[x][0], kleurvak_array[x][1], 106, 106, 0, kleur_array[x]);
                wacht_250();
                tft.fillRoundRect(kleurvak_array[x][0], kleurvak_array[x][1], 106, 106, 0, TFT_BLACK);
                tft.drawRoundRect(kleurvak_array[x][0], kleurvak_array[x][1], 106, 106, 0, kleur_array[x]);
                y++;
              }
              else {
                tft.fillScreen(TFT_RED);
                wacht_250();
                tft.fillScreen(TFT_BLACK);
                juiste_volgorde_scherm();
                score_int = 0;
                y = aantal_kleuren_int;
                break;
              }
            }
          }
        }
        if (((millis() - touch_update_long) > 500) && (int_bool)) {
          enable_touch_int();
        }
      }
      mijn_punten_int = mijn_punten_int + score_int;
      zend_string = String(score_int);
      if (ik_begin_bool) {
        uitsturen();
        while (!score_ontvangen_bool) {
          mesh.update();
        }
        speler_2_punten_int = speler_2_punten_int + ontvangen_score_int;
      }
      if (!ik_begin_bool) {
        while (!score_ontvangen_bool) {
          mesh.update();
        }
        speler_2_punten_int = speler_2_punten_int + ontvangen_score_int;
        uitsturen();
      }
      spel_bezig_bool = false;
      tft.fillScreen(TFT_WHITE);
      wacht_250();
      if ((mijn_punten_int >= ((aantal_kleuren_int - 2) * 5)) && (speler_2_punten_int >= ((aantal_kleuren_int - 2) * 5))) {
        aantal_kleuren_int ++;
        if (aantal_kleuren_int > 15) {
          aantal_kleuren_int = 15;
        }
      }
      juiste_volgorde_scherm();
      if (((millis() - touch_update_long) > 500) && (int_bool)) {
        enable_touch_int();
      }
      mesh.update();
    }
  }

/*
   CONNECT 4
*/

  if (spel_int == 93) {
    if ((touch_int_bool)  & (mijn_beurt_bool)) {
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        mesh.update();
      }
      touch_int_bool = false;
      int_bool = true;
      touch_update_long = millis();
      for (int x = 1; x < 8; x++) {
        if ((t_x > touch_coor_connect_array[x][0]) && (t_x < touch_coor_connect_array[x][1]) && (t_y > 0) && (t_y < 34)) {
          if (veld_connect_array[x] == 0) {
            zend_string = String(x);
            uitsturen();
            int x_array_int = x;
            int y_array_int = 1;
            int veld_array_int = x;
            for (int i = 0; i < 6; i ++) {
              tft.fillCircle(cirkel_x_coor_array[x_array_int], cirkel_y_coor_array[y_array_int], 12, cirkel_kleur_int);
              veld_array_int += 7;
              if ((veld_connect_array[veld_array_int] == 0) && (veld_array_int < 43)) {
                wacht_250();
                tft.fillCircle(cirkel_x_coor_array[x_array_int], cirkel_y_coor_array[y_array_int], 12, TFT_BLACK);
                y_array_int ++;
              }
              else {
                if (ik_begin_bool) {
                  cirkel_waarde_int = 3;
                }
                else {
                  cirkel_waarde_int = 5;
                }
                veld_connect_array[veld_array_int - 7] = cirkel_waarde_int;
                veld_gezet_bool = true;
                break;
              }
            }
          }
        }
      }
    }
    if (!mijn_beurt_bool) {
      if (ik_begin_bool) {
        cirkel_kleur_int = TFT_YELLOW;
      }
      else {
        cirkel_kleur_int = TFT_RED;
      }
      while (!rij_ontvangen_bool) {
        mesh.update();
      }
      rij_ontvangen_bool = false;
      if ((rij_int > 0) && (rij_int < 8)) {
        int x_array_int = rij_int;
        int y_array_int = 1;
        int veld_array_int = rij_int;
        for (int i = 0; i < 6; i ++) {
          tft.fillCircle(cirkel_x_coor_array[x_array_int], cirkel_y_coor_array[y_array_int], 12, cirkel_kleur_int);
          veld_array_int += 7;
          if ((veld_connect_array[veld_array_int] == 0) && (veld_array_int < 43)) {
            wacht_250();
            tft.fillCircle(cirkel_x_coor_array[x_array_int], cirkel_y_coor_array[y_array_int], 12, TFT_BLACK);
            y_array_int ++;
          }
          else {
            if (ik_begin_bool) {
              cirkel_waarde_int = 5;
            }
            else {
              cirkel_waarde_int = 3;
            }
            veld_connect_array[veld_array_int - 7] = cirkel_waarde_int;
            veld_gezet_bool = true;
            break;
          }
        }
      }
    }
    if (veld_gezet_bool) {
      tft.fillRoundRect(0, 0, 319, 45, 0, TFT_BLACK);
      veld_gezet_bool = false;
      mijn_beurt_bool = mijn_beurt_bool ^ 1;
      controle_connect_4();
      ingevuld_connect_4();
      if (mijn_beurt_bool) {
        if (ik_begin_bool) {
          cirkel_kleur_int = TFT_RED;
          connect_4_cirkels();
        }
        else {
          cirkel_kleur_int = TFT_YELLOW;
          connect_4_cirkels();
        }
      }
    }
  }

/*
   MASTERMIND
*/

  if (spel_int == 94) {
    while (1) {
      while (!kleuren_gekozen_bool) {
        if (touch_int_bool == true) {
          t_x = 0;
          t_y = 0;
          int max_loop = 0;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          while ((!pressed) && (max_loop < MAX_LOOP)) {
            max_loop++;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          }
          touch_int_bool = false;
          int_bool = true;
          touch_update_long = millis();
          for (int x = 0; x < 6; x++) {
            if ((t_x > 288) && (t_x < 320) && (t_y > mastermind_kleur_coor_array[x][0]) && (t_y < mastermind_kleur_coor_array[x][1])) {
              keuze_kleur_int = mastermind_kleur_array[x];
              gekozen_kleur();
            }
          }
          if (keuze_kleur_int != TFT_BLACK) {
            for (int x = 0; x < 4; x++) {
              if ((t_x > mijn_kleuren_coor_array[x][0]) && (t_x < mijn_kleuren_coor_array[x][1]) && (t_y > mijn_kleuren_coor_array[x][2]) && (t_y < mijn_kleuren_coor_array[x][3])) {
                gekozen_kleuren_array[x] = keuze_kleur_int;
                gekozen_kleuren();
                keuze_kleur_int = TFT_BLACK;
                gekozen_kleur();
              }
            }
          }
          if ((gekozen_kleuren_array[0] != TFT_WHITE) && (gekozen_kleuren_array[1] != TFT_WHITE) && (gekozen_kleuren_array[2] != TFT_WHITE) && (gekozen_kleuren_array[3] != TFT_WHITE)) {
            if ((t_x > 288) && (t_x < 320) && (t_y > 233) && (t_y < 263)) {
              tft.fillRect(289, 0, 30, 263, TFT_BLACK);
              kleuren_gekozen_bool = true;
              uitgestuurd_bool = false;
              zend_string = "";
              zend_string = zend_string + gekozen_kleuren_array[0] + "," + gekozen_kleuren_array[1] + "," + gekozen_kleuren_array[2] + "," + gekozen_kleuren_array[3];
            }
          }
        }
        if (((millis() - touch_update_long) > 500) && (int_bool)) {
          enable_touch_int();
        }
        mesh.update();
      }
      if((ik_begin_bool) && (!uitgestuurd_bool)){
        uitsturen();
        uitgestuurd_bool = true;
        while(!mastermind_kleuren_ontvangen_bool){
          mesh.update();
        }
      }
      if((!ik_begin_bool)  && (!uitgestuurd_bool)){
        while(!mastermind_kleuren_ontvangen_bool){
          mesh.update();
        }
        uitsturen();
        uitgestuurd_bool = true;
      }
      if (mastermind_kleuren_ontvangen_bool) {
        kleur_keuze();
        mastermind_speelrij_int = 0;
        for (int x = 0; x < 12; x++) {
          for (int y = 0; y < 4; y++) {
            mastermind_speelveld_array[x][y] = 0;
          }
        }
        spel_gedaan_bool = false;
        while (!spel_gedaan_bool) {
          mastermind_spelen_bool = true;
          if (touch_int_bool == true) {
            t_x = 0;
            t_y = 0;
            int max_loop = 0;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            while ((!pressed) && (max_loop < MAX_LOOP)) {
              max_loop++;
              pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            }
            touch_int_bool = false;
            int_bool = true;
            touch_update_long = millis();
            for (int x = 0; x < 6; x++) {
              if ((t_x > 288) && (t_x < 320) && (t_y > mastermind_kleur_coor_array[x][0]) && (t_y < mastermind_kleur_coor_array[x][1])) {
                keuze_kleur_int = mastermind_kleur_array[x];
                gekozen_kleur();
              }
            }
            if (keuze_kleur_int != TFT_BLACK) {
              for (int x = 0; x < 4; x++) {
                if ((t_x > mastermind_speelveld_coor_array[mastermind_speelrij_int][x][0]) && (t_x < mastermind_speelveld_coor_array[mastermind_speelrij_int][x][2]) &&
                    (t_y > mastermind_speelveld_coor_array[mastermind_speelrij_int][x][1]) && (t_y < mastermind_speelveld_coor_array[mastermind_speelrij_int][x][3])) {
                  mastermind_speelveld_array[mastermind_speelrij_int][x] = keuze_kleur_int;
                  speelkleuren();
                  keuze_kleur_int = TFT_BLACK;
                  gekozen_kleur();
                }
              }
            }
            if ((mastermind_speelveld_array[mastermind_speelrij_int][0] != TFT_BLACK) && (mastermind_speelveld_array[mastermind_speelrij_int][1] != TFT_BLACK) &&
                (mastermind_speelveld_array[mastermind_speelrij_int][2] != TFT_BLACK) && (mastermind_speelveld_array[mastermind_speelrij_int][3] != TFT_BLACK)) {
              if ((t_x > 288) && (t_x < 320) && (t_y > 233) && (t_y < 263)) {
                tft.fillRect(289, 0, 30, 263, TFT_BLACK);
                for (int x = 0; x < 4; x++) {
                  rij_score_array[x] = 0;
                }
                int score_array_teller_int = 0;
                bool score_vak_bool[4];
                for (int x = 0; x < 4; x++) {
                  score_vak_bool[x] = false;
                  if (mastermind_speelveld_array[mastermind_speelrij_int][x] == speler_2_kleuren_array[x]) {
                    rij_score_array[score_array_teller_int] = 2;
                    score_vak_bool[x] = true;
                    score_array_teller_int ++;
                  }
                }
                int controle_array[4];
                int controle_teller = 0;
                for (int x = 0; x < 4; x++) {
                  controle_array[x] = TFT_BLACK;
                }
                for (int x = 0; x < 4; x++) {
                  if (!score_vak_bool[x]) {
                    bool aanwezig_bool = false;
                    for (int y = 0; y < 4; y++) {
                      if (controle_array[y] == speler_2_kleuren_array[x]) {
                        aanwezig_bool = true;
                      }
                    }
                    if (!aanwezig_bool) {
                      controle_array[controle_teller] = speler_2_kleuren_array[x];
                      controle_teller ++;
                    }
                  }
                }
                for (int x = 0; x < 4; x++) {
                  if (!score_vak_bool[x]) {
                    for (int y = 0; y < 4; y++) {
                      if (controle_array[y] == mastermind_speelveld_array[mastermind_speelrij_int][x]) {
                        rij_score_array[score_array_teller_int] = 5;
                        score_array_teller_int ++;
                      }
                    }
                  }
                }
                int totaal_int = 0;
                for (int x = 0; x < 4; x++) {
                  totaal_int += rij_score_array[x];
                }
                if (totaal_int == 8) {
                  mijn_score_int = 1;
                }
                else {
                  mijn_score_int = 0;
                }
                mastermind_rij_gedaan_bool = true;
                zend_string = String(mijn_score_int);

                if((ik_begin_bool) && (mastermind_rij_gedaan_bool)){
                  uitsturen();
                  while(!mastermind_rij_ontvangen_bool){
                    mesh.update();
                  }
                }
                if((!ik_begin_bool) && (mastermind_rij_gedaan_bool)){
                  while(!mastermind_rij_ontvangen_bool){
                    mesh.update();
                  }
                  uitsturen();
                }
                kleur_keuze();
                if (mijn_score_int == 1) {
                  mijn_punten_int ++;
                  spel_gedaan_bool = true;
                }
                if (ontvangen_score_int == 1) {
                  speler_2_punten_int ++;
                  spel_gedaan_bool = true;
                }
                int score_vak_int = 0;
                for (int x = 0; x < 4; x++) {
                  if (rij_score_array[x] == 2) {
                    tft.fillRect(score_weergave_array[mastermind_speelrij_int][score_vak_int][0], score_weergave_array[mastermind_speelrij_int][score_vak_int][1], 15, 15, TFT_RED);
                    score_vak_int ++;
                  }
                }
                for (int x = 0; x < 4; x++) {
                  if (rij_score_array[x] == 5) {
                    tft.fillRect(score_weergave_array[mastermind_speelrij_int][score_vak_int][0], score_weergave_array[mastermind_speelrij_int][score_vak_int][1], 15, 15, TFT_WHITE);
                    score_vak_int ++;
                  }
                }
                mastermind_rij_ontvangen_bool = false;
                mastermind_rij_gedaan_bool = false;
                if (spel_gedaan_bool) {
                  tft.fillRect(100, 280, 139, 39, TFT_BLACK);
                  tft.setTextFont(2);
                  tft.setTextColor(TFT_RED);
                  if (mijn_score_int) {
                    tft.setCursor(100, 390);
                    tft.print("Juiste combinatie");
                    tft.setCursor(100, 410);
                    tft.print("nieuw spel over 5 seconden");
                  }
                  else {
                    tft.setCursor(100, 390);
                    tft.print("Niet gevonden");
                    tft.setCursor(100, 410);
                    tft.print("nieuw spel over 5 seconden");
                  }
                  wachten_long = millis();
                  while ((millis() - wachten_long) < 5000) {
                    mesh.update();
                  }
                  mastermind_scherm();
                }
                else {
                  mastermind_speelrij_int ++;
                  if (mastermind_speelrij_int == 12) {
                    spel_gedaan_bool = true;
                  }
                }
              }
            }
          }
          if (((millis() - touch_update_long) > 500) && (int_bool)) {
            enable_touch_int();
          }
          mesh.update();
        }
        mesh.update();
      }
      mesh.update();
    }
  }

/*
   PENTAGO
*/

  if (spel_int == 95) {
    kleur_int = TFT_WHITE;
    if ((touch_int_bool) && (mijn_beurt_bool)) {
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        mesh.update();
      }
      touch_int_bool = false;
      int_bool = true;
      touch_update_long = millis();
      for (int x = 1; x < 37; x++) {
        if ((t_x > pentago_touch_array[x][0]) && (t_x < pentago_touch_array[x][1]) && (t_y > pentago_touch_array[x][2]) && (t_y < pentago_touch_array[x][3])) {
          if (pentago_array[x] == 0) {
            if (ik_begin_bool) {
              teken_o(pentago_positie_array[x][0], pentago_positie_array[x][1]);
              pentago_array[x] = 7;
            }
            else {
              teken_x(pentago_positie_array[x][0], pentago_positie_array[x][1]);
              pentago_array[x] = 5;
            }
            zend_string = String(x);
            uitsturen();
            pentago_controle();
            if (!spel_gedaan_bool) {
              draai_vak();
              pentago_controle();
            }
            mijn_beurt_bool = mijn_beurt_bool ^ 1;
            if (mijn_beurt_bool) {
              tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
            }
            else {
              tft.fillRect(0, 469, 319, 10, TFT_BLACK);
            }
            if (spel_gedaan_bool) {
              tft.fillRect(0, 469, 319, 10, TFT_BLACK);
              tft.setTextFont(2);
              tft.setCursor(75, 460);
              tft.print("nieuw spel over 5 seconden");
              wacht_5s();
              ik_begin_bool = ik_begin_bool ^ 1;
              pentago_scherm();
            }
          }
          pentago_ingevuld();
        }
      }
    }
  }

/*
   SUPER TIC TAC TOE
*/

  if (spel_int == 96) {
    kleur_int = TFT_WHITE;
    if ((touch_int_bool) && (mijn_beurt_bool)) {
      t_x = 0;
      t_y = 0;
      int max_loop = 0;
      pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
      while ((!pressed) && (max_loop < MAX_LOOP)) {
        max_loop++;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        mesh.update();
      }
      touch_int_bool = false;
      int_bool = true;
      touch_update_long = millis();
      for (int x = 0; x < 9; x++) {
        if ((speelvak_int == x) || ((speelvak_int == 9) && (!vak_klaar_bool[x]))) {         //deze
          for (int y = 0; y < 9; y++) {
            if ((t_x > super_touch_array[x][y][0]) && (t_x < super_touch_array[x][y][1]) && (t_y > super_touch_array[x][y][2]) && (t_y < super_touch_array[x][y][3])) {
              if (super_array[x][y] == 0) {
                zend_string = "";
                zend_string = String(x) + String(y);
                uitsturen();
                if (ik_begin_bool) {
                  super_array[x][y] = 5;
                  teken_x(super_positie_array[x][y][0], super_positie_array[x][y][1]);
                }
                else {
                  super_array[x][y] = 3;
                  teken_o(super_positie_array[x][y][0], super_positie_array[x][y][1]);
                }
                controle_super(x);
                kleur_int = TFT_BLACK;
                super_speelvak();
                super_teken_speelvakken();
                reset_vakken();
                if (vak_klaar_bool[y]) {
                  speelvak_int = 9;
                  speelvak_bool[9] = true;
                }
                else {
                  speelvak_int = y;
                  speelvak_bool[y] = true;
                }
                kleur_int = TFT_MAGENTA;
                super_speelvak();
                mijn_beurt_bool = mijn_beurt_bool ^ 1;
                if (mijn_beurt_bool) {
                  tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
                }
                else {
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                }
              }
            }
          }
        }                                                                                   //deze
      }
      if (spel_gedaan_bool) {
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
        tft.setTextFont(2);
        tft.setCursor(75, 460);
        tft.print("nieuw spel over 5 seconden");
        wacht_5s();
        ik_begin_bool = ik_begin_bool ^ 1;
        super_tic_tac_toe_scherm();
      }
    }
  }

/*
   ZEESLAG
*/

  if (spel_int == 97) {
    if(((ik_begin_bool) && (!schepen_ontvangen_bool)) || ((!ik_begin_bool) && (!schepen_verzonden_bool))){
      if (touch_int_bool) {
        t_x = 0;
        t_y = 0;
        int max_loop = 0;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        while ((!pressed) && (max_loop < MAX_LOOP)) {
          max_loop++;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          mesh.update();
        }
        touch_int_bool = false;
        int_bool = true;
        touch_update_long = millis();
        if ((!schip_6_bool) && (!schip_4_bool) && (!schip_3_bool) && (!schip_2_bool)) {
          kleur_int = TFT_YELLOW;
          for (int x = 0; x < 6; x++) {
            if ((t_x > zeeslag_6_touch_array[x][0]) && (t_x < zeeslag_6_touch_array[x][1]) && (t_y > zeeslag_6_touch_array[x][2]) && (t_y < zeeslag_6_touch_array[x][3])) {
              if (zes_array[x] == -1) {
                tft.fillRect(zeeslag_6_positie_array[x][0], zeeslag_6_positie_array[x][1], 20, 20, kleur_int);
                teken_schip(3, 280, 373);
                schip_6_bool = true;
                vak_6_int = x;
                x = 6;
              }
              else {
                tft.fillRect(zeeslag_scherm_positie_array[zes_array[x]][0], zeeslag_scherm_positie_array[zes_array[x]][1], 31, 31, TFT_BLACK);
                tft.fillRect(zeeslag_6_positie_array[x][0], zeeslag_6_positie_array[x][1], 20, 20, TFT_BLACK);
                speelveld_array[zes_array[x]] = 0;
                zes_array[x] = - 1;
                schepen_geplaatst_bool = false;
                tft.fillRect(0, 460, 320, 20, TFT_BLACK);
              }
            }
          }
          if ((!schip_6_bool) && (!schip_4_bool) && (!schip_3_bool) && (!schip_2_bool)) {
            for (int y = 0; y < 2; y++) {
              if (y == 0) {
                kleur_int = TFT_YELLOW;
              }
              if (y == 1) {
                kleur_int = TFT_GREEN;
              }
              for (int x = 0; x < 4; x++) {
                if ((t_x > zeeslag_4_touch_array[y][x][0]) && (t_x < zeeslag_4_touch_array[y][x][1]) && (t_y > zeeslag_4_touch_array[y][x][2]) && (t_y < zeeslag_4_touch_array[y][x][3])) {
                  if (vier_array[y][x] == - 1) {
                    tft.fillRect(zeeslag_4_positie_array[y][x][0], zeeslag_4_positie_array[y][x][1], 20, 20, kleur_int);
                    teken_schip(2, 280, 373);
                    schip_4_bool = true;
                    schip_4_int = y;
                    vak_4_int = x;
                    y = 2;
                    x = 4;
                  }
                  else {
                    tft.fillRect(zeeslag_scherm_positie_array[vier_array[y][x]][0], zeeslag_scherm_positie_array[vier_array[y][x]][1], 31, 31, TFT_BLACK);
                    tft.fillRect(zeeslag_4_positie_array[y][x][0], zeeslag_4_positie_array[y][x][1], 20, 20, TFT_BLACK);
                    speelveld_array[vier_array[y][x]] = 0;
                    vier_array[y][x] = - 1;
                    schepen_geplaatst_bool = false;
                    tft.fillRect(0, 460, 320, 20, TFT_BLACK);
                  }
                }
              }
            }
          }
          if ((!schip_6_bool) && (!schip_4_bool) && (!schip_3_bool) && (!schip_2_bool)) {
            for (int y = 0; y < 3; y++) {
              if (y == 0) {
                kleur_int = TFT_YELLOW;
              }
              if (y == 1) {
                kleur_int = TFT_GREEN;
              }
              if (y == 2) {
                kleur_int = TFT_CYAN;
              }
              for (int x = 0; x < 3; x++) {
                if ((t_x > zeeslag_3_touch_array[y][x][0]) && (t_x < zeeslag_3_touch_array[y][x][1]) && (t_y > zeeslag_3_touch_array[y][x][2]) && (t_y < zeeslag_3_touch_array[y][x][3])) {
                  if (drie_array[y][x] == -1) {
                    tft.fillRect(zeeslag_3_positie_array[y][x][0], zeeslag_3_positie_array[y][x][1], 20, 20, kleur_int);
                    teken_schip(1, 280, 373);
                    schip_3_bool = true;
                    schip_3_int = y;
                    vak_3_int = x;
                    y = 3;
                    x = 3;
                  }
                  else {
                    tft.fillRect(zeeslag_scherm_positie_array[drie_array[y][x]][0], zeeslag_scherm_positie_array[drie_array[y][x]][1], 31, 31, TFT_BLACK);
                    tft.fillRect(zeeslag_3_positie_array[y][x][0], zeeslag_3_positie_array[y][x][1], 20, 20, TFT_BLACK);
                    speelveld_array[drie_array[y][x]] = 0;
                    drie_array[y][x] = - 1;
                    schepen_geplaatst_bool = false;
                    tft.fillRect(0, 460, 320, 20, TFT_BLACK);
                  }
                }
              }
            }
          }
          if ((!schip_6_bool) && (!schip_4_bool) && (!schip_3_bool) && (!schip_2_bool)) {
            for (int y = 0; y < 4; y++) {
              if (y == 0) {
                kleur_int = TFT_YELLOW;
              }
              if (y == 1) {
                kleur_int = TFT_GREEN;
              }
              if (y == 2) {
                kleur_int = TFT_CYAN;
              }
              if (y == 3) {
                kleur_int = TFT_MAGENTA;
              }
              for (int x = 0; x < 2; x++) {
                if ((t_x > zeeslag_2_touch_array[y][x][0]) && (t_x < zeeslag_2_touch_array[y][x][1]) && (t_y > zeeslag_2_touch_array[y][x][2]) && (t_y < zeeslag_2_touch_array[y][x][3])) {
                  if (twee_array[y][x] == -1) {
                    tft.fillRect(zeeslag_2_positie_array[y][x][0], zeeslag_2_positie_array[y][x][1], 20, 20, kleur_int);
                    teken_schip(0, 280, 373);
                    schip_2_bool = true;
                    schip_2_int = y;
                    vak_2_int = x;
                    y = 4;
                    x = 2;
                  }
                  else {
                    tft.fillRect(zeeslag_scherm_positie_array[twee_array[y][x]][0], zeeslag_scherm_positie_array[twee_array[y][x]][1], 31, 31, TFT_BLACK);
                    tft.fillRect(zeeslag_2_positie_array[y][x][0], zeeslag_2_positie_array[y][x][1], 20, 20, TFT_BLACK);
                    speelveld_array[twee_array[y][x]] = 0;
                    twee_array[y][x] = - 1;
                    schepen_geplaatst_bool = false;
                    tft.fillRect(0, 460, 320, 20, TFT_BLACK);
                  }
                }
              }
            }
          }
        }
        if ((schip_6_bool) || (schip_4_bool) || (schip_3_bool) || (schip_2_bool)) {
          for (int x = 0; x < 100; x++) {
            if ((t_x > zeeslag_scherm_touch_array[x][0]) && (t_x < zeeslag_scherm_touch_array[x][1]) && (t_y > zeeslag_scherm_touch_array[x][2]) && (t_y < zeeslag_scherm_touch_array[x][3])) {
              if (speelveld_array[x] == 0) {
                if (schip_6_bool) {
                  teken_schip(3, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                  zes_array[vak_6_int] = x;
                  speelveld_array[x] = 600 + vak_6_int;
                  tft.fillRect(280, 373, 31, 31, TFT_BLACK);
                  schip_6_bool = false;
                  x = 100;
                }
                if (schip_4_bool) {
                  teken_schip(2, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                  vier_array[schip_4_int][vak_4_int] = x;
                  speelveld_array[x] = 400 + (schip_4_int * 10) + vak_4_int;
                  tft.fillRect(280, 373, 31, 31, TFT_BLACK);
                  schip_4_bool = false;
                  x = 100;
                }
                if (schip_3_bool) {
                  teken_schip(1, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                  drie_array[schip_3_int][vak_3_int] = x;
                  speelveld_array[x] = 300 + (schip_3_int * 10) + vak_3_int;
                  tft.fillRect(280, 373, 31, 31, TFT_BLACK);
                  schip_3_bool = false;
                  x = 100;
                }
                if (schip_2_bool) {
                  teken_schip(0, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                  twee_array[schip_2_int][vak_2_int] = x;
                  speelveld_array[x] = 200 + (schip_2_int * 10) + vak_2_int;
                  tft.fillRect(280, 373, 31, 31, TFT_BLACK);
                  schip_2_bool = false;
                  x = 100;
                }
              }
            }
            schepen_geplaatst_controle();
          }
        }
        if ((schepen_geplaatst_bool) && (!zendstring_klaar_bool)) {
          tft.fillRect(0, 460, 320, 20, TFT_GREEN);
          tft.setCursor(140, 462);
          tft.setTextColor(TFT_BLACK);
          tft.setTextFont(2);
          tft.print("OK");
          if ((t_x > 0) && (t_x < 360) && (t_y > 460) && (t_y < 480)) {
            tft.fillRect(0, 460, 320, 20, TFT_BLACK);
            schrijf_zendstring();
            zendstring_klaar_bool = true;
          }
        }
      }
    }
    if (zendstring_klaar_bool) {
      if ((ik_begin_bool)  && (!schepen_verzonden_bool)) {
        uitsturen();
        schepen_verzonden_bool = true;
      }
      if(!ik_begin_bool){
        while(!(schepen_ontvangen_bool)){
          mesh.update();
        }
        wacht_500();
        uitsturen();
        schepen_verzonden_bool = true;
      }
      zendstring_klaar_bool = false;
      scherm_updaten_bool = true;
      scherm_klaar_bool = false;
    }
    if ((((ik_begin_bool) && (schepen_ontvangen_bool)) || ((!ik_begin_bool) && (schepen_verzonden_bool))) && (scherm_updaten_bool)){
      zeeslag_scherm_update();
      scherm_updaten_bool = false;
      scherm_klaar_bool = true;
    }
    if ((((ik_begin_bool) && (schepen_ontvangen_bool)) || ((!ik_begin_bool) && (schepen_verzonden_bool))) && (scherm_klaar_bool)){
      if(mijn_beurt_bool){
        if (touch_int_bool){
          t_x = 0;
          t_y = 0;
          int max_loop = 0;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          while ((!pressed) && (max_loop < MAX_LOOP)) {
            max_loop++;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            mesh.update();
          }
          touch_int_bool = false;
          int_bool = true;
          touch_update_long = millis();
          for (int x = 0; x < 100; x++) {
            if ((t_x > zeeslag_scherm_touch_array[x][0]) && (t_x < zeeslag_scherm_touch_array[x][1]) && (t_y > zeeslag_scherm_touch_array[x][2]) && (t_y < zeeslag_scherm_touch_array[x][3])) {
              bool controle_bool = true;
              Serial.println(x);
              if(mijn_array[x] == 0){
                zend_string = String(x);
                uitsturen();
                if(speler_2_speelveld_array[x] == 0){
                  mijn_array[x] = 1;
                  kleur_int = TFT_WHITE;
                  teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                }
                else{
                  omrekenen(speler_2_speelveld_array[x]);
                  switch(honderd_int){
                    case 2:
                      speler_2_score_twee_array[tien_int][een_int] = 1;
                      for(int y = 0; y < 2; y++){
                        if(speler_2_score_twee_array[tien_int][y] == 0){
                          controle_bool = false;
                        }
                      }
                      if(!controle_bool){
                        mijn_array[x] = 2;
                        kleur_int = TFT_RED;
                        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                      }
                      if(controle_bool){
                        kleur_int = TFT_RED;
                        for(int y = 0; y < 2; y++){
                          mijn_array[speler_2_twee_array[tien_int][y]] = 3;
                          tft.fillRect(zeeslag_scherm_positie_array[speler_2_twee_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_twee_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                          teken_schip(0, zeeslag_scherm_positie_array[speler_2_twee_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_twee_array[tien_int][y]][1]);
                        }
                      }
                      break;
                    case 3:
                      speler_2_score_drie_array[tien_int][een_int] = 1;
                      for(int y = 0; y < 3; y++){
                        if(speler_2_score_drie_array[tien_int][y] == 0){
                          controle_bool = false;
                        }
                      }
                      if(!controle_bool){
                        mijn_array[x] = 2;
                        kleur_int = TFT_RED;
                        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                      }
                      if(controle_bool){
                        kleur_int = TFT_RED;
                        for(int y = 0; y < 3; y++){
                          mijn_array[speler_2_drie_array[tien_int][y]] = 4;
                          tft.fillRect(zeeslag_scherm_positie_array[speler_2_drie_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_drie_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                          teken_schip(1, zeeslag_scherm_positie_array[speler_2_drie_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_drie_array[tien_int][y]][1]);
                        }
                      }
                      break;
                    case 4:
                      speler_2_score_vier_array[tien_int][een_int] = 1;
                      for(int y = 0; y < 4; y++){
                        if(speler_2_score_vier_array[tien_int][y] == 0){
                          controle_bool = false;
                        }
                      }
                      if(!controle_bool){
                        mijn_array[x] = 2;
                        kleur_int = TFT_RED;
                        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                      }
                      if(controle_bool){
                        kleur_int = TFT_RED;
                        for(int y = 0; y < 4; y++){
                          mijn_array[speler_2_vier_array[tien_int][y]] = 5;
                          tft.fillRect(zeeslag_scherm_positie_array[speler_2_vier_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_vier_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                          teken_schip(2, zeeslag_scherm_positie_array[speler_2_vier_array[tien_int][y]][0], zeeslag_scherm_positie_array[speler_2_vier_array[tien_int][y]][1]);
                        }
                      }
                      break;
                    case 6:
                      speler_2_score_zes_array[een_int] = 1;
                      for(int y = 0; y < 6; y++){
                        if(speler_2_score_zes_array[y] == 0){
                          controle_bool = false;
                        }
                      }
                      if(!controle_bool){
                        mijn_array[x] = 2;
                        kleur_int = TFT_RED;
                        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
                      }
                      if(controle_bool){
                        kleur_int = TFT_RED;
                        for(int y = 0; y < 6; y++){
                          mijn_array[speler_2_zes_array[y]] = 6;
                          tft.fillRect(zeeslag_scherm_positie_array[speler_2_zes_array[y]][0], zeeslag_scherm_positie_array[speler_2_zes_array[y]][1], 31, 31, TFT_BLACK);
                          teken_schip(3, zeeslag_scherm_positie_array[speler_2_zes_array[y]][0], zeeslag_scherm_positie_array[speler_2_zes_array[y]][1]);
                        }
                      }
                      break;
                  }
                  spel_gedaan_bool = true;
                  for(int y = 0; y < 4; y++){
                    for(int x = 0; x < 2; x++){
                      if(speler_2_score_twee_array[y][x] == 0){
                        spel_gedaan_bool = false;
                      }
                    }
                  }
                  for(int y = 0; y < 3; y++){
                    for(int x = 0; x < 3; x++){
                      if(speler_2_score_drie_array[y][x] == 0){
                        spel_gedaan_bool = false;
                      }
                    }
                  }
                  for(int y = 0; y < 2; y++){
                    for(int x = 0; x < 4; x++){
                      if(speler_2_score_vier_array[y][x] == 0){
                        spel_gedaan_bool = false;
                      }
                    }
                  }
                  for(int x = 0; x < 6; x++){
                    if(speler_2_score_zes_array[x] == 0){
                      spel_gedaan_bool = false;
                    }
                  }
                }
                if(!spel_gedaan_bool){
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                  ik_ben_klaar_bool = false;
                  wacht_2s();
                  wisselen_bool = true;
                }
                if(spel_gedaan_bool){
                  wisselen_bool = false;
                  tft.fillRect(0, 420, 320, 59, TFT_BLACK);
                  tft.setTextColor(TFT_RED);
                  tft.setTextFont(4);
                  tft.setCursor(90, 430);
                  tft.print("GEWONNEN");
                  mijn_punten_int ++;
                  wacht_2s();
                  speler_2_schepen();
                  mijn_score();
                  tft.setTextFont(2);
                  tft.setTextColor(TFT_RED);
                  tft.setCursor(50, 400);
                  tft.print("nieuw spel over 20 seconden");
                  wacht_20s();
                }
              }
            }
          }
        }
      }
      if(!mijn_beurt_bool){
        bool controle_bool = true;
        if(speler_2_array[ontvangen_int] == 0){
          if(speelveld_array[ontvangen_int] == 0){
            speler_2_array[ontvangen_int] = 1;
            kleur_int = TFT_WHITE;
            teken_schip(4, zeeslag_scherm_positie_array[ontvangen_int][0], zeeslag_scherm_positie_array[ontvangen_int][1]);
          }
          else{
            omrekenen(speelveld_array[ontvangen_int]);
            switch(honderd_int){
              case 2:
                score_twee_array[tien_int][een_int] = 1;
                for(int y = 0; y < 2; y++){
                  if(score_twee_array[tien_int][y] == 0){
                    controle_bool = false;
                  }
                }
                if(!controle_bool){
                  speler_2_array[ontvangen_int] = 2;
                  kleur_int = TFT_RED;
                  teken_schip(4, zeeslag_scherm_positie_array[ontvangen_int][0], zeeslag_scherm_positie_array[ontvangen_int][1]);
                }
                if(controle_bool){
                  kleur_int = TFT_RED;
                  for(int y = 0; y < 2; y++){
                    speler_2_array[twee_array[tien_int][y]] = 3;
                    tft.fillRect(zeeslag_scherm_positie_array[twee_array[tien_int][y]][0], zeeslag_scherm_positie_array[twee_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                    teken_schip(0, zeeslag_scherm_positie_array[twee_array[tien_int][y]][0], zeeslag_scherm_positie_array[twee_array[tien_int][y]][1]);
                  }
                }
                break;
              case 3:
                score_drie_array[tien_int][een_int] = 1;
                for(int y = 0; y < 3; y++){
                  if(score_drie_array[tien_int][y] == 0){
                    controle_bool = false;
                  }
                }
                if(!controle_bool){
                  speler_2_array[ontvangen_int] = 2;
                  kleur_int = TFT_RED;
                  teken_schip(4, zeeslag_scherm_positie_array[ontvangen_int][0], zeeslag_scherm_positie_array[ontvangen_int][1]);
                }
                if(controle_bool){
                  kleur_int = TFT_RED;
                  for(int y = 0; y < 3; y++){
                    speler_2_array[drie_array[tien_int][y]] = 4;
                    tft.fillRect(zeeslag_scherm_positie_array[drie_array[tien_int][y]][0], zeeslag_scherm_positie_array[drie_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                    teken_schip(1, zeeslag_scherm_positie_array[drie_array[tien_int][y]][0], zeeslag_scherm_positie_array[drie_array[tien_int][y]][1]);
                  }
                }
                break;
              case 4:
                score_vier_array[tien_int][een_int] = 1;
                for(int y = 0; y < 4; y++){
                  if(score_vier_array[tien_int][y] == 0){
                    controle_bool = false;
                  }
                }
                if(!controle_bool){
                  speler_2_array[ontvangen_int] = 2;
                  kleur_int = TFT_RED;
                  teken_schip(4, zeeslag_scherm_positie_array[ontvangen_int][0], zeeslag_scherm_positie_array[ontvangen_int][1]);
                }
                if(controle_bool){
                  kleur_int = TFT_RED;
                  for(int y = 0; y < 4; y++){
                    speler_2_array[vier_array[tien_int][y]] = 5;
                    tft.fillRect(zeeslag_scherm_positie_array[vier_array[tien_int][y]][0], zeeslag_scherm_positie_array[vier_array[tien_int][y]][1], 31, 31, TFT_BLACK);
                    teken_schip(2, zeeslag_scherm_positie_array[vier_array[tien_int][y]][0], zeeslag_scherm_positie_array[vier_array[tien_int][y]][1]);
                  }
                }
                break;
              case 6:
                score_zes_array[een_int] = 1;
                for(int y = 0; y < 6; y++){
                  if(score_zes_array[y] == 0){
                    controle_bool = false;
                  }
                }
                if(!controle_bool){
                  speler_2_array[ontvangen_int] = 2;
                  kleur_int = TFT_RED;
                  teken_schip(4, zeeslag_scherm_positie_array[ontvangen_int][0], zeeslag_scherm_positie_array[ontvangen_int][1]);
                }
                if(controle_bool){
                  kleur_int = TFT_RED;
                  for(int y = 0; y < 6; y++){
                    speler_2_array[zes_array[y]] = 6;
                    tft.fillRect(zeeslag_scherm_positie_array[zes_array[y]][0], zeeslag_scherm_positie_array[zes_array[y]][1], 31, 31, TFT_BLACK);
                    teken_schip(3, zeeslag_scherm_positie_array[zes_array[y]][0], zeeslag_scherm_positie_array[zes_array[y]][1]);
                  }
                }
                break;
            }
            spel_gedaan_bool = true;
            for(int y = 0; y < 4; y++){
              for(int x = 0; x < 2; x++){
                if(score_twee_array[y][x] == 0){
                  spel_gedaan_bool = false;
                }
              }
            }
            for(int y = 0; y < 3; y++){
              for(int x = 0; x < 3; x++){
                if(score_drie_array[y][x] == 0){
                  spel_gedaan_bool = false;
                }
              }
            }
            for(int y = 0; y < 2; y++){
              for(int x = 0; x < 4; x++){
                if(score_vier_array[y][x] == 0){
                  spel_gedaan_bool = false;
                }
              }
            }
            for(int x = 0; x < 6; x++){
              if(score_zes_array[x] == 0){
                spel_gedaan_bool = false;
              }
            }
          }
          if(!spel_gedaan_bool){
            ik_ben_klaar_bool = false;
            wisselen_bool = true;
            wacht_2s();
          }
          if(spel_gedaan_bool){
            wisselen_bool = false;
            tft.fillRect(0, 420, 320, 59, TFT_BLACK);
            tft.setTextColor(TFT_RED);
            tft.setTextFont(4);
            tft.setCursor(110, 430);
            tft.print("JAMMER");
            speler_2_punten_int ++;
            wacht_2s();
            speler_2_schepen();
            mijn_score();
            tft.setTextFont(2);
            tft.setTextColor(TFT_RED);
            tft.setCursor(50, 400);
            tft.print("nieuw spel over 20 seconden");
            wacht_20s();
          }
        }
      }
    }
    if(spel_gedaan_bool){
      zeeslag_startscherm();
      ik_begin_bool = ik_begin_bool ^ 1;
      mijn_beurt_bool = false;
      if(ik_begin_bool){
        mijn_beurt_bool = true;
      }
    }
    if(wisselen_bool){
      mijn_beurt_bool = mijn_beurt_bool ^ 1;
      zeeslag_scherm_update();
      wisselen_bool = false;
    }
  }
  
  /*
 * SMILEYS
 */

  if (spel_int == 98) {
    tft.setTextFont(2);
    tft.setTextColor(TFT_WHITE);
    if((ik_begin_bool) && (!smiley_aantal_verzonden_bool)){
      if (touch_int_bool) {
        t_x = 0;
        t_y = 0;
        int max_loop = 0;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        while ((!pressed) && (max_loop < MAX_LOOP)) {
          max_loop++;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          mesh.update();
        }
        touch_int_bool = false;
        int_bool = true;
        touch_update_long = millis();
        for (int x = 0; x < 13; x++) {
          if ((t_x > aantal_smileys_touch_array[x][0]) && (t_x < aantal_smileys_touch_array[x][1]) && (t_y > aantal_smileys_touch_array[x][2]) && (t_y < aantal_smileys_touch_array[x][3])) {
            if(x < 10){
              aantal_smileys_int = 8 + (x * 2);
              tft.fillRect(60, 180, 40, 40, TFT_BLACK);
              tft.setCursor(65, 200);
              tft.print(aantal_smileys_int);
            }
            if(x == 12){
              if(aantal_smileys_int != 0){
                char tmp_char[8];
                sprintf(tmp_char, "%02d", aantal_smileys_int);
                zend_string = "";
                zend_string = zend_string + String(tmp_char);
                uitsturen();
                smiley_aantal_verzonden_bool = true;
              }
            }
          }
        }
        if(smiley_aantal_verzonden_bool){
          int tmp;
          int x = 0;
          randomSeed(esp_random());
          while(x < aantal_smileys_int){
            tmp = random(0, 121);
            if(speler_2_smiley_array[tmp] == 0){
              speler_2_smiley_array[tmp] = 9;
              x++;
            }
          }
          zend_string = "";
          for(int x = 0; x < 121; x++){
            zend_string = zend_string + String(speler_2_smiley_array[x]);
          }
          uitsturen();
          smileys_verzonden_bool = true;
          smiley_bereken_buren();
          smiley_scherm();
        }
      }
    }
    if(((ik_begin_bool) && (smileys_verzonden_bool)) || ((!ik_begin_bool) && (smileys_ontvangen_bool))){
      if (touch_int_bool) {
        t_x = 0;
        t_y = 0;
        int max_loop = 0;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        while ((!pressed) && (max_loop < MAX_LOOP)) {
          max_loop++;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          mesh.update();
        }
        touch_int_bool = false;
        int_bool = true;
        touch_update_long = millis();
        for (int x = 0; x < 125; x++) {
          if ((t_x > smiley_touch_array[x][0]) && (t_x < smiley_touch_array[x][1]) && (t_y > smiley_touch_array[x][2]) && (t_y < smiley_touch_array[x][3])){
            bool gedaan_bool = false;
            if(x == 121){
              smiley_keuze_int = 5;
              smiley_teken_keuze_int();
            }
            if(x == 122){
              smiley_keuze_int = 4;
              smiley_teken_keuze_int();
            }
            if(x == 123){
              smiley_keuze_int = 3;
              smiley_teken_keuze_int();
            }
            if((x == 124) && (smileys_nog_te_doen_int == 0)){
              for(int x = 0; x < 121; x++){
                if((speler_2_smiley_array[x] == 9) && (smiley_controle_array[x] == 3)){
                  teken_smileys(smiley_positie_array[x][0], smiley_positie_array[x][1], SLAAP, TFT_YELLOW, TFT_BLACK, TFT_BLUE);
                }
                if((speler_2_smiley_array[x] == 9) && (smiley_controle_array[x] != 3)){
                  teken_smileys(smiley_positie_array[x][0], smiley_positie_array[x][1], BOOS, TFT_RED, TFT_BLACK, TFT_BLACK);
                  smileys_gevonden_bool = false;
                }
              }
              spel_gedaan_bool = true;
            }
            if((smiley_keuze_int == 3) && (x < 121) && (smiley_gedraaid_array[x] == 0)){
              if(smiley_controle_array[x] == 0){
                smiley_controle_array[x] = 3;
                smiley_teken_controle(x);
                smileys_nog_te_doen_int -= 1;
                smiley_teken_aantal(smileys_nog_te_doen_int);
                gedaan_bool = true;
              }
              if((smiley_controle_array[x] == 4) && (!gedaan_bool)){
                smiley_controle_array[x] = 3;
                smiley_teken_controle(x);
                smileys_nog_te_doen_int -= 1;
                smiley_teken_aantal(smileys_nog_te_doen_int);
                gedaan_bool = true;
              }
              if((smiley_controle_array[x] == 3) && (!gedaan_bool)){
                smiley_controle_array[x] = 0;
                smiley_teken_controle_leeg(x);
                smileys_nog_te_doen_int += 1;
                smiley_teken_aantal(smileys_nog_te_doen_int);
                gedaan_bool = true;
              }
            }
            if((smiley_keuze_int == 4) && (x < 121) && (smiley_gedraaid_array[x] == 0)){
              if((smiley_controle_array[x] == 0) && (!gedaan_bool)){ 
                smiley_controle_array[x] = 4;
                smiley_teken_controle(x);
                gedaan_bool = true;
              }
              
              if((smiley_controle_array[x] == 3) && (!gedaan_bool)){
                smiley_controle_array[x] = 4;
                smiley_teken_controle(x);
                smileys_nog_te_doen_int += 1;
                smiley_teken_aantal(smileys_nog_te_doen_int);
                gedaan_bool = true;
              }
              if((smiley_controle_array[x] == 4) && (!gedaan_bool)){
                smiley_controle_array[x] = 0;
                smiley_teken_controle_leeg(x);
                gedaan_bool = true;
              }
            }
            if((smiley_keuze_int == 5) && (x < 121)){
              rij_kolom_array_wissen();
              if(smiley_gedraaid_array[x] == 0){
                if(speler_2_smiley_array[x] == 9){
                  for(int y = 0; y < 121; y++){
                    if(speler_2_smiley_array[y] == 9){
                      teken_smileys(smiley_positie_array[y][0], smiley_positie_array[y][1], BOOS, TFT_RED, TFT_BLACK, TFT_BLACK);
                    }
                  }
                  smileys_gevonden_bool = false;
                  spel_gedaan_bool = true;
                }
                if(!spel_gedaan_bool){
                  if(smiley_aantal_buren_array[x] != 0){
                    smiley_gedraaid_array[x] = 1;
                    leeg_test(x);
                    smiley_teken_getallen(smiley_positie_array[x][0], smiley_positie_array[x][1], smiley_aantal_buren_array[x]);
                  }
                  if(smiley_aantal_buren_array[x] == 0){
                    rij_plus(x);
                    rij_min(x);
                    while((kolom_array_teller_int != 0) || (rij_array_teller_int != 0)){
                      while(kolom_array_teller_int > 0){
                        kolom_plus(smiley_kolom_array[kolom_array_teller_int]);
                        kolom_min(smiley_kolom_array[kolom_array_teller_int]);
                        kolom_array_teller_int --;
                      }
                      while(rij_array_teller_int > 0){
                        rij_plus(smiley_rij_array[rij_array_teller_int]);
                        rij_min(smiley_rij_array[rij_array_teller_int]);
                        rij_array_teller_int --;
                      }
                      while(diagonaal_array_teller_int > 0){
                        diagonaal(smiley_diagonaal_array[diagonaal_array_teller_int]);
                      }
                    }
                    for(int x = 0; x < 121; x++){
                      if(smiley_gedraaid_array[x] == 2){
                        smiley_gedraaid_array[x] = 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    while((!ik_begin_bool) && (!smileys_ontvangen_bool)){
      mesh.update();
    }
    if((ik_begin_bool) && (spel_gedaan_bool) && (!resultaat_verzonden_bool)){
      tft.fillRect(0, 380, 320, 100, TFT_BLACK);
      tft.setTextColor(TFT_RED);
      tft.setTextFont(2);
      if(smileys_gevonden_bool){
        tft.setCursor(0, 390);
        tft.print("Alle Smileys gevonden");
        tft.setCursor(0, 410);
        tft.print("Wachten op resulaat speler 2");
        mijn_punten_int ++;
        zend_string = "GOED";
      }
      if(!smileys_gevonden_bool){
        tft.setCursor(0, 390);
        tft.print("Alle Smileys NIET gevonden");
        tft.setCursor(0, 410);
        tft.print("Wachten op resulaat speler 2");
        zend_string = "FOUT";
      }
      uitsturen();
      resultaat_verzonden_bool = true;
    }
    while((ik_begin_bool) && (resultaat_verzonden_bool) && (!resultaat_ontvangen_bool)){
      mesh.update();
    }
    if((!ik_begin_bool) && (spel_gedaan_bool) && (!resultaat_verzonden_bool)){
      tft.fillRect(0, 380, 320, 100, TFT_BLACK);
      tft.setTextColor(TFT_RED);
      tft.setTextFont(2);
      if(smileys_gevonden_bool){
        tft.setCursor(0, 390);
        tft.print("Alle Smileys gevonden");
        mijn_punten_int ++;
        zend_string = "GOED";
      }
      if(!smileys_gevonden_bool){
        tft.setCursor(0, 390);
        tft.print("Alle Smileys NIET gevonden");
        zend_string = "FOUT";
      }
      if(!resultaat_ontvangen_bool){
        tft.setCursor(0, 410);
        tft.print("Wachten op resulaat speler 2");
      }
      while(!resultaat_ontvangen_bool){
        mesh.update();
      }
      wacht_500();
      uitsturen();
      resultaat_verzonden_bool = true;
    }
    if((ik_begin_bool) && (resultaat_verzonden_bool) && (resultaat_ontvangen_bool)){
      tft.setCursor(0, 430);
      if(smiley_resultaat_string == "GOED"){
        tft.print("Speler 2 alle Smileys gevonden");
        speler_2_punten_int ++;
      }
      if(smiley_resultaat_string == "FOUT"){
        tft.print("Speler 2 alle Smileys NIET gevonden");
      }
      tft.setCursor(0, 450);
      tft.print("Nieuw spel over 5 seconden");
      wacht_5s();
      ik_begin_bool = ik_begin_bool ^ 1;
      if(ik_begin_bool){
        smiley_aantal_ik_begin();
      }
      if(!ik_begin_bool){
        smiley_aantal_ik_begin_niet();
      }
    }
    if((!ik_begin_bool) && (resultaat_verzonden_bool) && (resultaat_ontvangen_bool)){
      tft.setCursor(0, 430);
      if(smiley_resultaat_string == "GOED"){
        tft.print("Speler 2 alle Smileys gevonden");
        speler_2_punten_int ++;
      }
      if(smiley_resultaat_string == "FOUT"){
        tft.print("Speler 2 alle Smileys NIET gevonden");
      }
      tft.setCursor(0, 450);
      tft.print("Nieuw spel over 5 seconden");
      wacht_5s();
      ik_begin_bool = ik_begin_bool ^ 1;
      if(ik_begin_bool){
        smiley_aantal_ik_begin();
      }
      if(!ik_begin_bool){
        smiley_aantal_ik_begin_niet();
      }
    }
  }

 /*
  * OTHELLO
  */

  if(spel_int == 99){
    if((ik_begin_bool) && (!othello_level_verzonden_bool)){
      while(!othello_level_verzonden_bool){
        mesh.update();
        if (touch_int_bool) {
          t_x = 0;
          t_y = 0;
          int max_loop = 0;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          while ((!pressed) && (max_loop < MAX_LOOP)) {
            max_loop++;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            mesh.update();
          }
          touch_int_bool = false;
          int_bool = true;
          touch_update_long = millis();
          for (int x = 0; x < 3; x++) {
            if ((t_x >  othello_level_touch_array[x][0]) && (t_x <  othello_level_touch_array[x][1]) && (t_y >  othello_level_touch_array[x][2]) && (t_y <  othello_level_touch_array[x][3])){
              if(x == 0){
                othello_level_bool = false;
                tft.setTextFont(2);
                tft.setTextColor(TFT_YELLOW);
                tft.fillRect(60, 180, 160, 40, TFT_BLACK);
                tft.setCursor(65, 200);
                tft.print("Beginner");
              }
              if(x == 1){
                othello_level_bool = true;
                tft.setTextFont(2);
                tft.setTextColor(TFT_YELLOW);
                tft.fillRect(60, 180, 160, 40, TFT_BLACK);
                tft.setCursor(65, 200);
                tft.print("Pro");
              }
              if(x == 2){
                zend_string = String(othello_level_bool);
                uitsturen();
                othello_level_verzonden_bool = true;
                othello_scherm();
              }
            }
          }
        }
        if (((millis() - touch_update_long) > 500) && (int_bool)) {
          enable_touch_int();
        }
      }
    }
    if((ik_begin_bool) && (othello_level_verzonden_bool) && (mijn_beurt_bool)){
      zoek_wit();
      if(!zwart_zet_mogelijk_bool){
        wit_zet_mogelijk();
        if(!wit_zet_mogelijk_bool){
          spel_gedaan_bool = true;
          zend_string = String(65);
          uitsturen();
        }
      }
      if(((!zwart_zet_mogelijk_bool) && (wit_zet_mogelijk_bool)) || (othello_level_bool)){
        tft.fillRect(120, 330, 80, 40, TFT_RED);
        tft.setTextFont(2);
        tft.setTextColor(TFT_WHITE);
        tft.setCursor(150, 342);
        tft.print("PAS");
      }
      if(!spel_gedaan_bool){
        bool loop = true;
        while(loop){
          mesh.update();
          if (touch_int_bool) {
            t_x = 0;
            t_y = 0;
            int max_loop = 0;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            while ((!pressed) && (max_loop < MAX_LOOP)) {
              max_loop++;
              pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
              mesh.update();
            }
            touch_int_bool = false;
            int_bool = true;
            touch_update_long = millis();
            for (int x = 0; x < 65; x++) {
              if ((t_x >  othello_touch_array[x][0]) && (t_x <  othello_touch_array[x][1]) && (t_y >  othello_touch_array[x][2]) && (t_y <  othello_touch_array[x][3])){
                if(othello_controle_array[x]){
                  wis_keuze_cirkels();
                  kleur_int = TFT_GOLD;
                  tft.fillCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] + 19, 13, kleur_int);
                  othello_speelveld_array[x] = ZWART;
                  tft.fillRect(120, 330, 80, 40, TFT_BLACK);
                  zend_string = String(x);
                  uitsturen();
                  wit_omdraaien(x);
                  mijn_schijven_int = 0;
                  speler_2_schijven_int = 0;
                  for(int x = 0; x < 64; x++){
                    if(othello_speelveld_array[x] == ZWART){
                      mijn_schijven_int ++;
                    }
                    if(othello_speelveld_array[x] == WIT){
                      speler_2_schijven_int ++;
                    }
                  }
                  othello_teken_aantal(mijn_schijven_int, speler_2_schijven_int);
                  mijn_beurt_bool = false;
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                  loop = false;
                }
                if(((!zwart_zet_mogelijk_bool) || (othello_level_bool)) && (x == 64)){
                  tft.fillRect(120, 330, 80, 40, TFT_BLACK);
                  zend_string = String(x);
                  uitsturen();
                  mijn_beurt_bool = false;
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                  loop = false;
                }
              }
            }
          }
          if (((millis() - touch_update_long) > 500) && (int_bool)) {
            enable_touch_int();
          }
        }
      }
    }
    if((!ik_begin_bool) && (!othello_level_ontvangen_bool)){
      while(!othello_level_ontvangen_bool){
        mesh.update();
      }
      othello_scherm();
    }
    if((!ik_begin_bool) && (mijn_beurt_bool) && (othello_level_ontvangen_bool)){
      zoek_zwart();
      if(!wit_zet_mogelijk_bool){
        zwart_zet_mogelijk();
        if(!zwart_zet_mogelijk_bool){
          spel_gedaan_bool = true;
          zend_string = String(65);
          uitsturen();
        }
      }
      if(((!wit_zet_mogelijk_bool) && (zwart_zet_mogelijk_bool)) || (othello_level_bool)){
        tft.fillRect(120, 330, 80, 40, TFT_RED);
        tft.setTextFont(2);
        tft.setTextColor(TFT_WHITE);
        tft.setCursor(150, 342);
        tft.print("PAS");
      }
      if(!spel_gedaan_bool){
        bool loop = true;
        while(loop){
          mesh.update();
          if (touch_int_bool) {
            t_x = 0;
            t_y = 0;
            int max_loop = 0;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
            while ((!pressed) && (max_loop < MAX_LOOP)) {
              max_loop++;
              pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
              mesh.update();
            }
            touch_int_bool = false;
            int_bool = true;
            touch_update_long = millis();
            for (int x = 0; x < 65; x++) {
              if ((t_x >  othello_touch_array[x][0]) && (t_x <  othello_touch_array[x][1]) && (t_y >  othello_touch_array[x][2]) && (t_y <  othello_touch_array[x][3])){
                if(othello_controle_array[x]){
                  wis_keuze_cirkels();
                  kleur_int = TFT_WHITE;
                  tft.fillCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] + 19, 13, kleur_int);
                  othello_speelveld_array[x] = WIT;
                  tft.fillRect(120, 330, 80, 40, TFT_BLACK);
                  zend_string = String(x);
                  uitsturen();
                  zwart_omdraaien(x);
                  mijn_schijven_int = 0;
                  speler_2_schijven_int = 0;
                  for(int x = 0; x < 64; x++){
                    if(othello_speelveld_array[x] == WIT){
                      mijn_schijven_int ++;
                    }
                    if(othello_speelveld_array[x] == ZWART){
                      speler_2_schijven_int ++;
                    }
                  }
                  othello_teken_aantal(mijn_schijven_int, speler_2_schijven_int);
                  mijn_beurt_bool = false;
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                  loop = false;
                }
                if(((!wit_zet_mogelijk_bool) || (othello_level_bool)) && (x == 64)){
                  tft.fillRect(120, 330, 80, 40, TFT_BLACK);
                  zend_string = String(x);
                  uitsturen();
                  mijn_beurt_bool = false;
                  tft.fillRect(0, 469, 319, 10, TFT_BLACK);
                  loop = false;
                }
              }
            }
          }
          if (((millis() - touch_update_long) > 500) && (int_bool)) {
            enable_touch_int();
          }
        }
      }
    }
    if(!mijn_beurt_bool){
      while(!othello_vak_ontvangen_bool){
        mesh.update();
      }
      if((ik_begin_bool) && (othello_vak_ontvangen_bool)){
        if(othello_vak_ontvangen_int == 65){
          spel_gedaan_bool = true;
        }
        if(!spel_gedaan_bool){
          if(othello_vak_ontvangen_int < 64){
            kleur_int = TFT_WHITE;
            tft.fillCircle(othello_positie_array[othello_vak_ontvangen_int][0] + 19, othello_positie_array[othello_vak_ontvangen_int][1] + 19, 13, kleur_int);
            othello_speelveld_array[othello_vak_ontvangen_int] = WIT;
            zwart_omdraaien(othello_vak_ontvangen_int);
            mijn_schijven_int = 0;
            speler_2_schijven_int = 0;
            for(int x = 0; x < 64; x++){
              if(othello_speelveld_array[x] == ZWART){
                mijn_schijven_int ++;
              }
              if(othello_speelveld_array[x] == WIT){
                speler_2_schijven_int ++;
              }
            }
            othello_teken_aantal(mijn_schijven_int, speler_2_schijven_int);
          }
          mijn_beurt_bool = true;
          tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
          othello_vak_ontvangen_bool = false;
        }
        
      }
      if((!ik_begin_bool) && (othello_vak_ontvangen_bool)){
        if(othello_vak_ontvangen_int == 65){
          spel_gedaan_bool = true;
        }
        if(!spel_gedaan_bool){
          if(othello_vak_ontvangen_int < 64){
            kleur_int = TFT_GOLD;
            tft.fillCircle(othello_positie_array[othello_vak_ontvangen_int][0] + 19, othello_positie_array[othello_vak_ontvangen_int][1] + 19, 13, kleur_int);
            othello_speelveld_array[othello_vak_ontvangen_int] = ZWART;
            wit_omdraaien(othello_vak_ontvangen_int);
            mijn_schijven_int = 0;
            speler_2_schijven_int = 0;
            for(int x = 0; x < 64; x++){
              if(othello_speelveld_array[x] == WIT){
                mijn_schijven_int++;
              }
              if(othello_speelveld_array[x] == ZWART){
                speler_2_schijven_int++;
              }
            }
            othello_teken_aantal(mijn_schijven_int, speler_2_schijven_int);
          }
          mijn_beurt_bool = true;
          tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
          othello_vak_ontvangen_bool = false;
        }
      }
    }
    if(spel_gedaan_bool){
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      tft.setTextColor(TFT_RED);
      tft.setTextFont(4);
      if(mijn_schijven_int > speler_2_schijven_int){
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      if(speler_2_schijven_int > mijn_schijven_int){
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
      if(mijn_schijven_int == speler_2_schijven_int){
        tft.setCursor(65, 430);
        tft.print("GEEN  WINNAAR");
      }
      tft.setTextFont(2);
      tft.setCursor(75, 460);
      tft.print("nieuw spel over 5 seconden");
      wacht_5s();
      ik_begin_bool = ik_begin_bool ^ 1;
      if(ik_begin_bool){
        mijn_beurt_bool = true;
      }
      if(!ik_begin_bool){
        mijn_beurt_bool = false;
      }
      othello_scherm(); 
    }
  }
  mesh.update();
  if (((millis() - touch_update_long) > 500) && (int_bool)) {
    enable_touch_int();
  }
}

/*
  FUNCTIONS
*/

void touch_calibrate() {
  uint16_t calData[5];
  uint8_t calDataOK = 0;
  if (!SPIFFS.begin()) {
    tft.fillScreen(TFT_BLACK);
    tft.setTextFont(2);
    tft.setTextColor(TFT_RED);
    tft.setCursor(10, 100);
    tft.print("Format SPIFFS");
    SPIFFS.format();
    tft.fillScreen(TFT_BLACK);
    SPIFFS.begin();
  }
  if (SPIFFS.exists(CALIBRATION_FILE)) {
    if (REPEAT_CAL) {
      SPIFFS.remove(CALIBRATION_FILE);
    }
    else {
      File f = SPIFFS.open(CALIBRATION_FILE, "r");
      if (f) {
        if (f.readBytes((char *)calData, 14) == 14) {
          calDataOK = 1;
        }
        f.close();
      }
    }
  }
  if (calDataOK && !REPEAT_CAL) {
    tft.setTouch(calData);
  }
  else {
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(20, 0);
    tft.setTextFont(2);
    tft.setTextSize(1);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.println("Touch corners as indicated");
    tft.setTextFont(1);
    tft.println();
    if (REPEAT_CAL) {
      tft.setTextColor(TFT_RED, TFT_BLACK);
      tft.println("Set REPEAT_CAL to false to stop this running again!");
    }
    tft.calibrateTouch(calData, TFT_MAGENTA, TFT_BLACK, 15);
    tft.setTextColor(TFT_GREEN, TFT_BLACK);
    tft.println("Calibration complete!");
    File f = SPIFFS.open(CALIBRATION_FILE, "w");
    if (f) {
      f.write((const unsigned char *)calData, 14);
      f.close();
    }
  }
}

void touch() {
  detachInterrupt(digitalPinToInterrupt(TOUCH_INT));
  touch_int_bool = true;
}

void dummy() {
}

/*
   TIC TAC TOE
*/

void tic_tac_toe_scherm() {
  spel_gedaan_bool = false;
  kleur_int = TFT_WHITE;
  tft.fillScreen(TFT_BLACK);
  tft.drawLine(119, 40, 119, 279, TFT_WHITE);
  tft.drawLine(199, 40, 199, 279, TFT_WHITE);
  tft.drawLine(40, 119, 279, 119, TFT_WHITE);
  tft.drawLine(40, 199, 279, 199, TFT_WHITE);
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if (mijn_beurt_bool) {
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
  }
  else {
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
  }
  if (ik_begin_bool) {
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("O");
  }
  else {
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("X");
  }
  for (int x = 0; x < 10; x++) {
    veld_array[x] = 0;
  }
}

void controle() {
  for (int x = 0; x < 8; x++) {
    int totaal = veld_array[score_array[x][0]] + veld_array[score_array[x][1]] + veld_array[score_array[x][2]];
    if (totaal == 9) {
      kleur_int = TFT_BLUE;
      teken_o(positie_array[score_array[x][0]][0], positie_array[score_array[x][0]][1]);
      teken_o(positie_array[score_array[x][1]][0], positie_array[score_array[x][1]][1]);
      teken_o(positie_array[score_array[x][2]][0], positie_array[score_array[x][2]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
    if (totaal == 15) {
      kleur_int = TFT_BLUE;
      teken_x(positie_array[score_array[x][0]][0], positie_array[score_array[x][0]][1]);
      teken_x(positie_array[score_array[x][1]][0], positie_array[score_array[x][1]][1]);
      teken_x(positie_array[score_array[x][2]][0], positie_array[score_array[x][2]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
    }
    if (spel_gedaan_bool) {
      tft.setTextFont(2);
      tft.setCursor(75, 460);
      tft.print("nieuw spel over 5 seconden");
      wacht_5s();
      ik_begin_bool = ik_begin_bool ^ 1;
      if (ik_begin_bool) {
        mijn_beurt_bool = true;
      }
      else {
        mijn_beurt_bool = false;
      }
      tic_tac_toe_scherm();
    }
  }
}

void ingevuld() {
  ingevuld_bool = true;
  for (int x = 1; x < 10; x++) {
    if (veld_array[x] == 0) {
      ingevuld_bool = false;
    }
  }
  if (ingevuld_bool) {
    tft.fillRect(0, 420, 320, 59, TFT_BLACK);
    tft.setTextColor(TFT_RED);
    tft.setTextFont(4);
    tft.setCursor(65, 430);
    tft.print("GEEN  WINNAAR");
    tft.setTextFont(2);
    tft.setCursor(75, 460);
    tft.print("nieuw spel over 5 seconden");
    wacht_5s();
    ik_begin_bool = ik_begin_bool ^ 1;
    if (ik_begin_bool) {
      mijn_beurt_bool = true;
    }
    else {
      mijn_beurt_bool = false;
    }
    tic_tac_toe_scherm();
  }
}

/*
   FOUR IN A ROW
*/

void vier_op_een_rij_scherm() {
  spel_gedaan_bool = false;
  kleur_int = TFT_WHITE;
  tft.fillScreen(TFT_BLACK);
  tft.drawLine(62, 0, 62, 319, TFT_WHITE);
  tft.drawLine(127, 0, 127, 319, TFT_WHITE);
  tft.drawLine(192, 0, 192, 319, TFT_WHITE);
  tft.drawLine(256, 0, 256, 319, TFT_WHITE);
  tft.drawLine(0, 62, 319, 62, TFT_WHITE);
  tft.drawLine(0, 127, 319, 127, TFT_WHITE);
  tft.drawLine(0, 192, 319, 192, TFT_WHITE);
  tft.drawLine(0, 256, 319, 256, TFT_WHITE);
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if (mijn_beurt_bool) {
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
  }
  else {
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
  }
  if (ik_begin_bool) {
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("O");
  }
  else {
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("X");
  }
  for (int x = 0; x < 26; x++) {
    veld_4_array[x] = 0;
  }
}

void controle_4() {
  for (int x = 0; x < 28; x++) {
    int totaal = veld_4_array[score_4_array[x][0]] + veld_4_array[score_4_array[x][1]] + veld_4_array[score_4_array[x][2]] + veld_4_array[score_4_array[x][3]];
    if (totaal == 12) {
      kleur_int = TFT_BLUE;
      teken_o(positie_4_array[score_4_array[x][0]][0], positie_4_array[score_4_array[x][0]][1]);
      teken_o(positie_4_array[score_4_array[x][1]][0], positie_4_array[score_4_array[x][1]][1]);
      teken_o(positie_4_array[score_4_array[x][2]][0], positie_4_array[score_4_array[x][2]][1]);
      teken_o(positie_4_array[score_4_array[x][3]][0], positie_4_array[score_4_array[x][3]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
    if (totaal == 20) {
      kleur_int = TFT_BLUE;
      teken_x(positie_4_array[score_4_array[x][0]][0], positie_4_array[score_4_array[x][0]][1]);
      teken_x(positie_4_array[score_4_array[x][1]][0], positie_4_array[score_4_array[x][1]][1]);
      teken_x(positie_4_array[score_4_array[x][2]][0], positie_4_array[score_4_array[x][2]][1]);
      teken_x(positie_4_array[score_4_array[x][3]][0], positie_4_array[score_4_array[x][3]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
    }
    if (spel_gedaan_bool) {
      tft.setTextFont(2);
      tft.setCursor(75, 460);
      tft.print("nieuw spel over 5 seconden");
      wacht_5s();
      ik_begin_bool = ik_begin_bool ^ 1;
      if (ik_begin_bool) {
        mijn_beurt_bool = true;
      }
      else {
        mijn_beurt_bool = false;
      }
      vier_op_een_rij_scherm();
    }
  }
}

void ingevuld_4() {
  ingevuld_bool = true;
  for (int x = 1; x < 26; x++) {
    if (veld_4_array[x] == 0) {
      ingevuld_bool = false;
    }
  }
  if (ingevuld_bool) {
    tft.fillRect(0, 420, 320, 59, TFT_BLACK);
    tft.setTextColor(TFT_RED);
    tft.setTextFont(4);
    tft.setCursor(65, 430);
    tft.print("GEEN  WINNAAR");
    tft.setTextFont(2);
    tft.setCursor(75, 460);
    tft.print("nieuw spel over 5 seconden");
    wacht_5s();
    ik_begin_bool = ik_begin_bool ^ 1;
    if (ik_begin_bool) {
      mijn_beurt_bool = true;
    }
    else {
      mijn_beurt_bool = false;
    }
    vier_op_een_rij_scherm();
  }
}

/*
   TIC TAC TOE   FOUR IN A ROW    PENTAGO     SUPER TIC TAC TOE
*/

void teken_x(int x_int, int y_int) {
  for (int tmp_x_int = x_int; tmp_x_int > x_int - 20; tmp_x_int --) {
    for (int tmp_y_int = y_int; tmp_y_int < y_int + 20; tmp_y_int ++) {
      if (x_bool_array[x_int - tmp_x_int][tmp_y_int - y_int]) {
        tft.drawPixel(tmp_x_int, tmp_y_int, kleur_int);
      }
    }
  }
}

void teken_o(int x_int, int y_int) {
  for (int tmp_x_int = x_int; tmp_x_int > x_int - 20; tmp_x_int --) {
    for (int tmp_y_int = y_int; tmp_y_int < y_int + 20; tmp_y_int ++) {
      if (nul_bool_array[x_int - tmp_x_int][tmp_y_int - y_int]) {
        tft.drawPixel(tmp_x_int, tmp_y_int, kleur_int);
      }
    }
  }
}

/*
   MEMORY SPEL
*/

void juiste_volgorde_scherm() {
  tft.fillScreen(TFT_BLACK);
  tft.drawRoundRect(0, 0, 106, 106, 0, TFT_SKYBLUE);
  tft.drawRoundRect(212, 0, 106, 106, 0, TFT_RED);
  tft.drawRoundRect(106, 106, 106, 106, 0, TFT_YELLOW);
  tft.drawRoundRect(0, 212, 106, 106, 0, TFT_GREEN);
  tft.drawRoundRect(212, 212, 106, 106, 0, TFT_MAGENTA);
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  tft.setTextColor(TFT_CYAN);
  tft.setCursor(190, 430);
  tft.print(aantal_kleuren_int);
}

/*
   CONNECT 4
*/

void connect_4_scherm() {
  tft.fillScreen(TFT_BLACK);
  for (int x = 0; x < 11; x++) {
    tft.drawLine(connect_4_scherm_array[x][0], connect_4_scherm_array[x][1], connect_4_scherm_array[x][2], connect_4_scherm_array[x][3], TFT_WHITE);
  }
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  for (int x = 0; x < 43; x++) {
    veld_connect_array[x] = 0;
  }
}

void connect_4_cirkels() {
  tft.fillRoundRect(0, 0, 319, 45, 0, TFT_GREEN);
  for (int x = 0; x < 7; x++) {
    tft.fillCircle(connect_4_cirkels_array[x], 21, 15, cirkel_kleur_int);
  }
}

void controle_connect_4() {
  for (int x = 0; x < 69; x++) {
    int totaal = veld_connect_array[score_connect_array[x][0]] + veld_connect_array[score_connect_array[x][1]] + veld_connect_array[score_connect_array[x][2]] + veld_connect_array[score_connect_array[x][3]];
    if (totaal == 12) {
      int y = score_connect_array[x][0];
      int y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      int x_coor =  score_connect_array[x][0];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][1];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][1];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][2];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][2];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][3];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][3];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 319, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
    if (totaal == 20) {
      int y = score_connect_array[x][0];
      int y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      int x_coor =  score_connect_array[x][0];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][1];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][1];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][2];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][2];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      y = score_connect_array[x][3];
      y_coor = 1;
      while (y > 7) {
        y_coor ++;
        y -= 7;
      }
      x_coor =  score_connect_array[x][3];
      while (x_coor > 7) {
        x_coor -= 7;
      }
      tft.fillCircle(cirkel_x_coor_array[x_coor], cirkel_y_coor_array[y_coor], 15, TFT_BLUE);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 319, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
    }
  }
  if (spel_gedaan_bool) {
    tft.setTextFont(2);
    tft.setCursor(75, 460);
    tft.print("nieuw spel over 5 seconden");
    wacht_5s();
    ik_begin_bool = ik_begin_bool ^ 1;
    if (ik_begin_bool) {
      mijn_beurt_bool = true;
    }
    else {
      mijn_beurt_bool = false;
    }
    spel_gedaan_bool = false;
    connect_4_scherm();
  }
}

void ingevuld_connect_4() {
  ingevuld_bool = true;
  for (int x = 1; x < 43; x++) {
    if (veld_connect_array[x] == 0) {
      ingevuld_bool = false;
    }
  }
  if (ingevuld_bool) {
    tft.fillRect(0, 260, 240, 59, TFT_BLACK);
    tft.setTextColor(TFT_RED);
    tft.setTextFont(4);
    tft.setCursor(105, 430);
    tft.print("GEEN  WINNAAR");
    tft.setTextFont(2);
    tft.setCursor(75, 460);
    tft.print("nieuw spel over 5 seconden");
    wacht_5s();
    ik_begin_bool = ik_begin_bool ^ 1;
    if (ik_begin_bool) {
      mijn_beurt_bool = true;
    }
    else {
      mijn_beurt_bool = false;
    }
    connect_4_scherm();
  }
}

/*
   MASTERMIND
*/

void kleur_keuze() {
  tft.fillRect(289, 0, 30, 30, TFT_BLUE);
  tft.fillRect(289, 30, 30, 30, TFT_CYAN);
  tft.fillRect(289, 60, 30, 30, TFT_GREEN);
  tft.fillRect(289, 90, 30, 30, TFT_RED);
  tft.fillRect(289, 120, 30, 30, TFT_MAGENTA);
  tft.fillRect(289, 150, 30, 30, TFT_YELLOW);
  tft.fillRect(289, 233, 30, 30, TFT_WHITE);
  tft.setTextFont(2);
  tft.setTextColor(TFT_BLUE);
  tft.setCursor(298, 240);
  tft.print("OK");
  keuze_kleur_int = TFT_BLACK;
}

void gekozen_kleur() {
  tft.fillRect(289, 191, 30, 30, keuze_kleur_int);
}

void gekozen_kleuren() {
  for (int x = 0; x < 4; x++) {
    tft.fillRect(mijn_kleuren_coor_array[x][0], mijn_kleuren_coor_array[x][2], 30, 30, gekozen_kleuren_array[x]);
  }
}

void mastermind_scherm() {
  mastermind_kleuren_ontvangen_bool = false;
  kleuren_gekozen_bool = false;
  mastermind_spelen_bool = false;
  tft.fillScreen(TFT_BLACK);
  for (int x = 0; x < 14; x++) {
    tft.drawLine(mastermind_scherm_array[x][0], mastermind_scherm_array[x][1], mastermind_scherm_array[x][2], mastermind_scherm_array[x][3], TFT_WHITE);
  }
  for (int x = 0; x < 27; x++) {
    tft.drawLine(mastermind_score_array[x][0], mastermind_score_array[x][1], mastermind_score_array[x][2], mastermind_score_array[x][3], TFT_OLIVE);
  }
  kleur_keuze();
  gekozen_kleur();
  for (int x = 0; x < 4; x++) {
    gekozen_kleuren_array[x] = TFT_WHITE;
  }
  gekozen_kleuren();
  tft.setTextFont(4);
  tft.setTextColor(TFT_RED);
  tft.setCursor(160, 450);
  tft.print(mijn_punten_int);
  tft.setTextFont(2);
  tft.setCursor(210, 450);
  tft.print(mijn_punten_int);
  tft.setCursor(230, 450);
  tft.print("-");
  tft.setCursor(250, 450);
  tft.print(speler_2_punten_int);
}

void speelkleuren() {
  for (int x = 0; x < 4; x++) {
    tft.fillRect(mastermind_speelveld_coor_array[mastermind_speelrij_int][x][0], mastermind_speelveld_coor_array[mastermind_speelrij_int][x][1], 31, 31, mastermind_speelveld_array[mastermind_speelrij_int][x]);
  }
}

/*
   PENTAGO
*/

void pentago_scherm() {
  spel_gedaan_bool = false;
  tft.fillScreen(TFT_BLACK);
  for (int x = 0; x < 32; x++) {
    tft.drawLine(pentago_scherm_array[x][0], pentago_scherm_array[x][1], pentago_scherm_array[x][2], pentago_scherm_array[x][3], pentago_scherm_array[x][4]);
  }
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if (ik_begin_bool) {
    mijn_beurt_bool = true;
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("O");
  }
  else {
    mijn_beurt_bool = false;
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("X");
  }
  for (int x = 0; x < 37; x++) {
    pentago_array[x] = 0;
  }
}

void teken_keuzevak_1() {
  tft.drawRect(pentago_keuze_array[1][0], pentago_keuze_array[1][1], 46, 45, keuzevak_1_kleur_int);
  tft.drawRect(pentago_keuze_array[1][0] + 1, pentago_keuze_array[1][1] + 1, 44, 43, keuzevak_1_kleur_int);
  tft.drawRect(pentago_keuze_array[1][0] + 2, pentago_keuze_array[1][1] + 2, 42, 41, keuzevak_1_kleur_int);
  tft.drawRect(pentago_keuze_array[1][0] + 3, pentago_keuze_array[1][1] + 3, 40, 39, keuzevak_1_kleur_int);
}

void teken_keuzevak_2() {
  tft.drawRect(pentago_keuze_array[2][0], pentago_keuze_array[2][1], 46, 45, keuzevak_2_kleur_int);
  tft.drawRect(pentago_keuze_array[2][0] + 1, pentago_keuze_array[2][1] + 1, 44, 43, keuzevak_2_kleur_int);
  tft.drawRect(pentago_keuze_array[2][0] + 2, pentago_keuze_array[2][1] + 2, 42, 41, keuzevak_2_kleur_int);
  tft.drawRect(pentago_keuze_array[2][0] + 3, pentago_keuze_array[2][1] + 3, 40, 39, keuzevak_2_kleur_int);
}

void teken_keuzevak_3() {
  tft.drawRect(pentago_keuze_array[3][0], pentago_keuze_array[3][1], 46, 45, keuzevak_3_kleur_int);
  tft.drawRect(pentago_keuze_array[3][0] + 1, pentago_keuze_array[3][1] + 1, 44, 43, keuzevak_3_kleur_int);
  tft.drawRect(pentago_keuze_array[3][0] + 2, pentago_keuze_array[3][1] + 2, 42, 41, keuzevak_3_kleur_int);
  tft.drawRect(pentago_keuze_array[3][0] + 3, pentago_keuze_array[3][1] + 3, 40, 39, keuzevak_3_kleur_int);
}

void teken_keuzevak_4() {
  tft.drawRect(pentago_keuze_array[4][0], pentago_keuze_array[4][1], 46, 45, keuzevak_4_kleur_int);
  tft.drawRect(pentago_keuze_array[4][0] + 1, pentago_keuze_array[4][1] + 1, 44, 43, keuzevak_4_kleur_int);
  tft.drawRect(pentago_keuze_array[4][0] + 2, pentago_keuze_array[4][1] + 2, 42, 41, keuzevak_4_kleur_int);
  tft.drawRect(pentago_keuze_array[4][0] + 3, pentago_keuze_array[4][1] + 3, 40, 39, keuzevak_4_kleur_int);
}

void teken_keuzevakken() {
  teken_keuzevak_1();
  teken_keuzevak_2();
  teken_keuzevak_3();
  teken_keuzevak_4();
}

void teken_pijl_rechts() {
  for (int y = 0; y < 31; y++) {
    for (int x = 0; x < 31; x++) {
      if (pijlen_array[y][x]) {
        tft.drawPixel(x + 237, y + 327, TFT_WHITE);
      }
    }
  }
}

void teken_pijl_links() {
  for (int y = 0; y < 31; y++) {
    for (int x = 0; x < 31; x++) {
      if (pijlen_array[y][x]) {
        tft.drawPixel(82 - x, y + 327, TFT_WHITE);
      }
    }
  }
}

void teken_pijlen() {
  teken_pijl_rechts();
  teken_pijl_links();
}

void wis_keuzevakken() {
  tft.fillRoundRect(0, 280, 320, 100, 0, TFT_BLACK);
}

void wis_vak_1() {
  for (int x = 0; x < 8; x++) {
    tft.fillRect(pentago_touch_array[vak_1_draai_array[x]][0] + 1, pentago_touch_array[vak_1_draai_array[x]][2] + 1, 44, 44, TFT_BLACK);
  }
}

void wis_vak_2() {
  for (int x = 0; x < 8; x++) {
    tft.fillRect(pentago_touch_array[vak_2_draai_array[x]][0] + 1, pentago_touch_array[vak_2_draai_array[x]][2] + 1, 44, 44, TFT_BLACK);
  }
}

void wis_vak_3() {
  for (int x = 0; x < 8; x++) {
    tft.fillRect(pentago_touch_array[vak_3_draai_array[x]][0] + 1, pentago_touch_array[vak_3_draai_array[x]][2] + 1, 44, 44, TFT_BLACK);
  }
}

void wis_vak_4() {
  for (int x = 0; x < 8; x++) {
    tft.fillRect(pentago_touch_array[vak_4_draai_array[x]][0] + 1, pentago_touch_array[vak_4_draai_array[x]][2] + 1, 44, 44, TFT_BLACK);
  }
}

void draai_1_links() {
  int temp = pentago_array[vak_1_draai_array[7]];
  for (int x = 7; x > 0; x--) {
    pentago_array[vak_1_draai_array[x]] = pentago_array[vak_1_draai_array[x - 1]];
  }
  pentago_array[vak_1_draai_array[0]] = temp;
}

void draai_2_links() {
  int temp = pentago_array[vak_2_draai_array[7]];
  for (int x = 7; x > 0; x--) {
    pentago_array[vak_2_draai_array[x]] = pentago_array[vak_2_draai_array[x - 1]];
  }
  pentago_array[vak_2_draai_array[0]] = temp;
}

void draai_3_links() {
  int temp = pentago_array[vak_3_draai_array[7]];
  for (int x = 7; x > 0; x--) {
    pentago_array[vak_3_draai_array[x]] = pentago_array[vak_3_draai_array[x - 1]];
  }
  pentago_array[vak_3_draai_array[0]] = temp;
}

void draai_4_links() {
  int temp = pentago_array[vak_4_draai_array[7]];
  for (int x = 7; x > 0; x--) {
    pentago_array[vak_4_draai_array[x]] = pentago_array[vak_4_draai_array[x - 1]];
  }
  pentago_array[vak_4_draai_array[0]] = temp;
}

void draai_1_rechts() {
  int temp = pentago_array[vak_1_draai_array[0]];
  for (int x = 0; x < 7; x++) {
    pentago_array[vak_1_draai_array[x]] = pentago_array[vak_1_draai_array[x + 1]];
  }
  pentago_array[vak_1_draai_array[7]] = temp;
}

void draai_2_rechts() {
  int temp = pentago_array[vak_2_draai_array[0]];
  for (int x = 0; x < 7; x++) {
    pentago_array[vak_2_draai_array[x]] = pentago_array[vak_2_draai_array[x + 1]];
  }
  pentago_array[vak_2_draai_array[7]] = temp;
}

void draai_3_rechts() {
  int temp = pentago_array[vak_3_draai_array[0]];
  for (int x = 0; x < 7; x++) {
    pentago_array[vak_3_draai_array[x]] = pentago_array[vak_3_draai_array[x + 1]];
  }
  pentago_array[vak_3_draai_array[7]] = temp;
}

void draai_4_rechts() {
  int temp = pentago_array[vak_4_draai_array[0]];
  for (int x = 0; x < 7; x++) {
    pentago_array[vak_4_draai_array[x]] = pentago_array[vak_4_draai_array[x + 1]];
  }
  pentago_array[vak_4_draai_array[7]] = temp;
}

void vul_vak_1() {
  for (int x = 0; x < 8; x++) {
    if (pentago_array[vak_1_draai_array[x]] == 7) {
      teken_o(pentago_positie_array[vak_1_draai_array[x]][0], pentago_positie_array[vak_1_draai_array[x]][1]);
    }
    if (pentago_array[vak_1_draai_array[x]] == 5) {
      teken_x(pentago_positie_array[vak_1_draai_array[x]][0], pentago_positie_array[vak_1_draai_array[x]][1]);
    }
  }
}

void vul_vak_2() {
  for (int x = 0; x < 8; x++) {
    if (pentago_array[vak_2_draai_array[x]] == 7) {
      teken_o(pentago_positie_array[vak_2_draai_array[x]][0], pentago_positie_array[vak_2_draai_array[x]][1]);
    }
    if (pentago_array[vak_2_draai_array[x]] == 5) {
      teken_x(pentago_positie_array[vak_2_draai_array[x]][0], pentago_positie_array[vak_2_draai_array[x]][1]);
    }
  }
}

void vul_vak_3() {
  for (int x = 0; x < 8; x++) {
    if (pentago_array[vak_3_draai_array[x]] == 7) {
      teken_o(pentago_positie_array[vak_3_draai_array[x]][0], pentago_positie_array[vak_3_draai_array[x]][1]);
    }
    if (pentago_array[vak_3_draai_array[x]] == 5) {
      teken_x(pentago_positie_array[vak_3_draai_array[x]][0], pentago_positie_array[vak_3_draai_array[x]][1]);
    }
  }
}

void vul_vak_4() {
  for (int x = 0; x < 8; x++) {
    if (pentago_array[vak_4_draai_array[x]] == 7) {
      teken_o(pentago_positie_array[vak_4_draai_array[x]][0], pentago_positie_array[vak_4_draai_array[x]][1]);
    }
    if (pentago_array[vak_4_draai_array[x]] == 5) {
      teken_x(pentago_positie_array[vak_4_draai_array[x]][0], pentago_positie_array[vak_4_draai_array[x]][1]);
    }
  }
}

void pentago_controle() {
  int x = 0;
  while ((x < 32) && (!spel_gedaan_bool)) {
    int totaal = pentago_array[pentago_score_array[x][0]] + pentago_array[pentago_score_array[x][1]] + pentago_array[pentago_score_array[x][2]] +
                 pentago_array[pentago_score_array[x][3]] + pentago_array[pentago_score_array[x][4]];
    if (totaal == 35) {
      kleur_int = TFT_BLUE;
      teken_o(pentago_positie_array[pentago_score_array[x][0]][0], pentago_positie_array[pentago_score_array[x][0]][1]);
      teken_o(pentago_positie_array[pentago_score_array[x][1]][0], pentago_positie_array[pentago_score_array[x][1]][1]);
      teken_o(pentago_positie_array[pentago_score_array[x][2]][0], pentago_positie_array[pentago_score_array[x][2]][1]);
      teken_o(pentago_positie_array[pentago_score_array[x][3]][0], pentago_positie_array[pentago_score_array[x][3]][1]);
      teken_o(pentago_positie_array[pentago_score_array[x][4]][0], pentago_positie_array[pentago_score_array[x][4]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
    if (totaal == 25) {
      kleur_int = TFT_BLUE;
      teken_x(pentago_positie_array[pentago_score_array[x][0]][0], pentago_positie_array[pentago_score_array[x][0]][1]);
      teken_x(pentago_positie_array[pentago_score_array[x][1]][0], pentago_positie_array[pentago_score_array[x][1]][1]);
      teken_x(pentago_positie_array[pentago_score_array[x][2]][0], pentago_positie_array[pentago_score_array[x][2]][1]);
      teken_x(pentago_positie_array[pentago_score_array[x][3]][0], pentago_positie_array[pentago_score_array[x][3]][1]);
      teken_x(pentago_positie_array[pentago_score_array[x][4]][0], pentago_positie_array[pentago_score_array[x][4]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
    }
    x++;
  }
}

void draai_vak() {
  if (mijn_beurt_bool) {
    vak_1_leeg_bool = true;
    keuzevak_1_kleur_int = TFT_WHITE;
    for (int x = 0; x < 8; x++) {
      if (pentago_array[vak_1_array[x]] != 0) {
        vak_1_leeg_bool = false;
        keuzevak_1_kleur_int = TFT_RED;
      }
    }
    vak_2_leeg_bool = true;
    keuzevak_2_kleur_int = TFT_WHITE;
    for (int x = 0; x < 8; x++) {
      if (pentago_array[vak_2_array[x]] != 0) {
        vak_2_leeg_bool = false;
        keuzevak_2_kleur_int = TFT_GREEN;
      }
    }
    vak_3_leeg_bool = true;
    keuzevak_3_kleur_int = TFT_WHITE;
    for (int x = 0; x < 8; x++) {
      if (pentago_array[vak_3_array[x]] != 0) {
        vak_3_leeg_bool = false;
        keuzevak_3_kleur_int = TFT_YELLOW;
      }
    }
    vak_4_leeg_bool = true;
    keuzevak_4_kleur_int = TFT_WHITE;
    for (int x = 0; x < 8; x++) {
      if (pentago_array[vak_4_array[x]] != 0) {
        vak_4_leeg_bool = false;
        keuzevak_4_kleur_int = TFT_CYAN;
      }
    }
    teken_keuzevakken();
    vak_1_gekozen_bool = false;
    vak_2_gekozen_bool = false;
    vak_3_gekozen_bool = false;
    vak_4_gekozen_bool = false;
    pijl_links_bool = false;
    pijl_rechts_bool = false;
    while ((!vak_1_gekozen_bool) && (!vak_2_gekozen_bool) && (!vak_3_gekozen_bool) && (!vak_4_gekozen_bool)) {
      if ((touch_int_bool == true) && (mijn_beurt_bool)) {
        t_x = 0;
        t_y = 0;
        int max_loop = 0;
        pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        while ((!pressed) && (max_loop < MAX_LOOP)) {
          max_loop++;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
        }
        touch_int_bool = false;
        int_bool = true;
        touch_update_long = millis();
        for (int x = 0; x < 4; x++) {
          if ((t_x > pentago_keuze_touch_array[x][0]) && (t_x < pentago_keuze_touch_array[x][1]) && (t_y > pentago_keuze_touch_array[x][2]) && (t_y < pentago_keuze_touch_array[x][3])) {
            switch (x) {
              case 0:
                vak_1_gekozen_bool = true;
                wis_keuzevakken();
                teken_keuzevak_1();
                if (!vak_1_leeg_bool) {
                  zend_string = String(38);
                  uitsturen();
                }
                break;
              case 1:
                vak_2_gekozen_bool = true;
                wis_keuzevakken();
                teken_keuzevak_2();
                if (!vak_2_leeg_bool) {
                  zend_string = String(39);
                  uitsturen();
                }
                break;
              case 2:
                vak_3_gekozen_bool = true;
                wis_keuzevakken();
                teken_keuzevak_3();
                if (!vak_3_leeg_bool) {
                  zend_string = String(40);
                  uitsturen();
                }
                break;
              case 3:
                vak_4_gekozen_bool = true;
                wis_keuzevakken();
                teken_keuzevak_4();
                if (!vak_4_leeg_bool) {
                  zend_string = String(41);
                  uitsturen();
                }
            }
          }
        }
      }
      if (((millis() - touch_update_long) > 500) && (int_bool)) {
        enable_touch_int();
      }
      mesh.update();
    }
    if (!((vak_1_gekozen_bool && vak_1_leeg_bool) || (vak_2_gekozen_bool && vak_2_leeg_bool) || (vak_3_gekozen_bool && vak_3_leeg_bool) || (vak_4_gekozen_bool && vak_4_leeg_bool))) {
      teken_pijlen();
      while ((!pijl_links_bool) && (!pijl_rechts_bool)) {
        if ((touch_int_bool == true) && (mijn_beurt_bool)) {
          t_x = 0;
          t_y = 0;
          int max_loop = 0;
          pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          while ((!pressed) && (max_loop < MAX_LOOP)) {
            max_loop++;
            pressed = tft.getTouch(&t_x, &t_y, TOUCH_TRESHOLD);
          }
          touch_int_bool = false;
          int_bool = true;
          touch_update_long = millis();
          for (int x = 0; x < 2; x++) {
            if ((t_x > pijl_touch_array[x][0]) && (t_x < pijl_touch_array[x][1]) && (t_y > pijl_touch_array[x][2]) && (t_y < pijl_touch_array[x][3])) {
              switch (x) {
                case 0:
                  pijl_links_bool = true;
                  zend_string = String(42);
                  uitsturen();
                  break;
                case 1:
                  pijl_rechts_bool = true;
                  zend_string = String(43);
                  uitsturen();
              }
            }
          }
        }
        if (((millis() - touch_update_long) > 500) && (int_bool)) {
          enable_touch_int();
        }
        mesh.update();
      }
      if (pijl_links_bool) {
        if (vak_1_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_1();
            wacht_250();
            draai_1_links();
            vul_vak_1();
            wacht_250();
          }
        }
        if (vak_2_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_2();
            wacht_250();
            draai_2_links();
            vul_vak_2();
            wacht_250();
          }
        }
        if (vak_3_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_3();
            wacht_250();
            draai_3_links();
            vul_vak_3();
            wacht_250();
          }
        }
        if (vak_4_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_4();
            wacht_250();
            draai_4_links();
            vul_vak_4();
            wacht_250();
          }
        }
      }
      if (pijl_rechts_bool) {
        if (vak_1_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_1();
            wacht_250();
            draai_1_rechts();
            vul_vak_1();
            wacht_250();
          }
        }
        if (vak_2_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_2();
            wacht_250();
            draai_2_rechts();
            vul_vak_2();
            wacht_250();
          }
        }
        if (vak_3_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_3();
            wacht_250();
            draai_3_rechts();
            vul_vak_3();
            wacht_250();
          }
        }
        if (vak_4_gekozen_bool) {
          for (int x = 0; x < 2; x++) {
            wis_vak_4();
            wacht_250();
            draai_4_rechts();
            vul_vak_4();
            wacht_250();
          }
        }
      }
    }
    else {
      zend_string = String(37);
      uitsturen();
    }
    wis_keuzevakken();
  }
}

void pentago_ingevuld() {
  ingevuld_bool = true;
  for (int x = 1; x < 37; x++) {
    if (pentago_array[x] == 0) {
      ingevuld_bool = false;
    }
  }
  if (ingevuld_bool) {
    tft.fillRect(0, 420, 320, 59, TFT_BLACK);
    tft.setTextColor(TFT_RED);
    tft.setTextFont(4);
    tft.setCursor(65, 430);
    tft.print("GEEN  WINNAAR");
    tft.setTextFont(2);
    tft.setCursor(75, 460);
    tft.print("nieuw spel over 5 seconden");
    wacht_5s();
    ik_begin_bool = ik_begin_bool ^ 1;
    if (ik_begin_bool) {
      mijn_beurt_bool = true;
    }
    else {
      mijn_beurt_bool = false;
    }
    pentago_scherm();
  }
}

/*
   Super Tic Tac
*/

void super_tic_tac_toe_scherm() {
  spel_gedaan_bool = false;
  tft.fillScreen(TFT_BLACK);
  super_teken_speelvakken();
  for (int x = 0; x < 36; x++) {
    tft.drawLine(super_scherm_array[x][0], super_scherm_array[x][1], super_scherm_array[x][2], super_scherm_array[x][3], super_scherm_array[x][4]);
  }
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if (ik_begin_bool) {
    mijn_beurt_bool = true;
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("X");
  }
  else {
    mijn_beurt_bool = false;
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
    tft.setTextFont(4);
    tft.setCursor(280, 430);
    tft.setTextColor(TFT_GREEN);
    tft.print("O");
  }
  for (int x = 0; x < 10; x++) {
    for (int y = 0; y < 9; y++) {
      super_array[x][y] = 0;
    }
  }
  for (int x = 0; x < 9; x++) {
    vak_klaar_bool[x] = false;
  }
  reset_vakken();
  speelvak_int = 9;
  speelvak_bool[9] = true;
  kleur_int = TFT_MAGENTA;
  super_speelvak();
}

void super_teken_speelvakken() {
  for (int x = 0; x < 12; x++) {
    tft.drawLine(super_vakken_array[x][0], super_vakken_array[x][1], super_vakken_array[x][2], super_vakken_array[x][3], super_vakken_array[x][4]);
  }
}

void super_speelvak() {
  tft.drawRect(super_vak_gekozen_array[speelvak_int][0], super_vak_gekozen_array[speelvak_int][1], super_vak_gekozen_array[speelvak_int][2], super_vak_gekozen_array[speelvak_int][2], kleur_int);
  tft.drawRect(super_vak_gekozen_array[speelvak_int][0] + 1, super_vak_gekozen_array[speelvak_int][1] + 1, super_vak_gekozen_array[speelvak_int][2] - 2, super_vak_gekozen_array[speelvak_int][2] - 2, kleur_int);
  tft.drawRect(super_vak_gekozen_array[speelvak_int][0] + 2, super_vak_gekozen_array[speelvak_int][1] + 2, super_vak_gekozen_array[speelvak_int][2] - 4, super_vak_gekozen_array[speelvak_int][2] - 4, kleur_int);
}

void reset_vakken() {
  for (int x = 0; x < 10; x++) {
    speelvak_bool[x] = false;
  }
}

void controle_super(int vak) {
  for (int x = 0; x < 8; x++) {
    int totaal = super_array[vak][super_score_array[x][0]] + super_array[vak][super_score_array[x][1]] + super_array[vak][super_score_array[x][2]];
    if (totaal == 9) {
      vak_klaar_bool[vak] = true;
      super_array[9][vak] = 3;
      kleur_int = TFT_YELLOW;
      teken_o(super_positie_array[vak][super_score_array[x][0]][0], super_positie_array[vak][super_score_array[x][0]][1]);
      teken_o(super_positie_array[vak][super_score_array[x][1]][0], super_positie_array[vak][super_score_array[x][1]][1]);
      teken_o(super_positie_array[vak][super_score_array[x][2]][0], super_positie_array[vak][super_score_array[x][2]][1]);
      kleur_int = TFT_RED;
      teken_groot_o(groot_positie_array[vak][0], groot_positie_array[vak][1]);
    }
    if (totaal == 15) {
      vak_klaar_bool[vak] = true;
      super_array[9][vak] = 5;
      kleur_int = TFT_YELLOW;
      teken_x(super_positie_array[vak][super_score_array[x][0]][0], super_positie_array[vak][super_score_array[x][0]][1]);
      teken_x(super_positie_array[vak][super_score_array[x][1]][0], super_positie_array[vak][super_score_array[x][1]][1]);
      teken_x(super_positie_array[vak][super_score_array[x][2]][0], super_positie_array[vak][super_score_array[x][2]][1]);
      kleur_int = TFT_RED;
      teken_groot_x(groot_positie_array[vak][0], groot_positie_array[vak][1]);
    }
  }
  if (!vak_klaar_bool[vak]) {
    ingevuld_bool = true;
    for (int x = 0; x < 9; x++) {
      if (super_array[vak][x] == 0) {
        ingevuld_bool = false;
      }
    }
    if (ingevuld_bool) {
      vak_klaar_bool[vak] = true;
    }
  }
  for (int x = 0; x < 8; x++) {
    int totaal = super_array[9][super_score_array[x][0]] + super_array[9][super_score_array[x][1]] + super_array[9][super_score_array[x][2]];
    if (totaal == 9) {
      kleur_int = TFT_BLUE;
      teken_groot_o(groot_positie_array[super_score_array[x][0]][0], groot_positie_array[super_score_array[x][0]][1]);
      teken_groot_o(groot_positie_array[super_score_array[x][1]][0], groot_positie_array[super_score_array[x][1]][1]);
      teken_groot_o(groot_positie_array[super_score_array[x][2]][0], groot_positie_array[super_score_array[x][2]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (!ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
    if (totaal == 15) {
      kleur_int = TFT_BLUE;
      teken_groot_x(groot_positie_array[super_score_array[x][0]][0], groot_positie_array[super_score_array[x][0]][1]);
      teken_groot_x(groot_positie_array[super_score_array[x][1]][0], groot_positie_array[super_score_array[x][1]][1]);
      teken_groot_x(groot_positie_array[super_score_array[x][2]][0], groot_positie_array[super_score_array[x][2]][1]);
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      if (ik_begin_bool) {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(90, 430);
        tft.print("GEWONNEN");
        mijn_punten_int ++;
      }
      else {
        tft.setTextColor(TFT_RED);
        tft.setTextFont(4);
        tft.setCursor(110, 430);
        tft.print("JAMMER");
        speler_2_punten_int ++;
      }
    }
  }
  if (!spel_gedaan_bool) {
    ingevuld_bool = true;
    for (int x = 0; x < 9; x++) {
      if (super_array[9][x] == 0) {
        ingevuld_bool = false;
      }
    }
    if (ingevuld_bool) {
      spel_gedaan_bool = true;
      tft.fillRect(0, 420, 320, 59, TFT_BLACK);
      tft.setTextColor(TFT_RED);
      tft.setTextFont(4);
      tft.setCursor(65, 430);
      tft.print("GEEN  WINNAAR");
    }
  }
}

void teken_groot_x(int x_int, int y_int) {
  for (int y = 0; y < 50; y++) {
    for (int x = 0; x < 50; x++) {
      if (x_groot_array[x][y]) {
        tft.drawPixel(x_int + x, y_int + y, kleur_int);
      }
    }
  }
}

void teken_groot_o(int x_int, int y_int) {
  for (int y = 0; y < 50; y++) {
    for (int x = 0; x < 50; x++) {
      if (o_groot_array[x][y]) {
        tft.drawPixel(x_int + x, y_int + y, kleur_int);
      }
    }
  }
}

/*
   ZEESLAG
*/

void zeeslag_startscherm() {
  zendstring_klaar_bool = false;
  schepen_geplaatst_bool = false;
  schepen_verzonden_bool = false;
  schepen_ontvangen_bool = false;
  ik_ben_klaar_bool = false;
  spel_gedaan_bool = false;
  tft.fillScreen(TFT_BLACK);
  kleur_int = TFT_WHITE;
  zeeslag_scherm();
  zeeslag_schepen();
  for (int x = 0; x < 6; x++) {
    zes_array[x] = -1;
    speler_2_zes_array[x] = - 1;
    score_zes_array[x] = 0;
    speler_2_score_zes_array[x] = 0;
  }
  for (int y = 0; y < 2; y++) {
    for (int x = 0; x < 4; x++) {
      vier_array[y][x] = -1;
      score_vier_array[y][x] = 0;
      speler_2_vier_array[y][x] = -1;
      speler_2_score_vier_array[y][x] = 0;
    }
  }
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      drie_array[y][x] = -1;
      score_drie_array[y][x] = 0;
      speler_2_drie_array[y][x] = -1;
      speler_2_score_drie_array[y][x] = 0;
    }
  }
  for (int y = 0; y < 4; y++) {
    for (int x = 0; x < 2; x++) {
      twee_array[y][x] = -1;
      score_twee_array[y][x] = 0;
      speler_2_twee_array[y][x] = -1;
      speler_2_score_twee_array[y][x] = 0;
    }
  }
  for (int x = 0; x < 100; x++) {
    speelveld_array[x] = 0;
    speler_2_speelveld_array[x] = 0;
    mijn_array[x] = 0;
    speler_2_array[x] = 0;
  }
}

void zeeslag_scherm() {
  kleur_int = TFT_WHITE;
  for (int x = 0; x < 18; x++) {
    tft.drawLine(zeeslag_scherm_array[x][0], zeeslag_scherm_array[x][1], zeeslag_scherm_array[x][2], zeeslag_scherm_array[x][3], kleur_int);
  }
}

void zeeslag_schepen() {
  for (int x = 0; x < 61; x++) {
    tft.drawLine(schepen_array[x][0], schepen_array[x][1], schepen_array[x][2], schepen_array[x][3], kleur_int);
  }
}

void teken_schip(int x_int, int x_coor, int y_coor) {
  for (int y = 0; y < 31; y++) {
    for (int x = 0; x < 31; x++) {
      if (boot_array[x_int][y][x]) {
        tft.drawPixel(x_coor + x, y_coor + y, kleur_int);
      }
    }
  }
}

void schepen_geplaatst_controle() {
  schepen_geplaatst_bool = true;
  for (int x = 0; x < 6; x++) {
    if (zes_array[x] == -1) {
      schepen_geplaatst_bool = false;
    }
  }
  for (int y = 0; y < 2; y++) {
    for (int x = 0; x < 4; x++) {
      if (vier_array[y][x] == -1) {
        schepen_geplaatst_bool = false;
      }
    }
  }
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      if (drie_array[y][x] == -1) {
        schepen_geplaatst_bool = false;
      }
    }
  }
  for (int y = 0; y < 4; y++) {
    for (int x = 0; x < 2; x++) {
      if (twee_array[y][x] == -1) {
        schepen_geplaatst_bool = false;
      }
    }
  }
}

void schrijf_zendstring() {
  zend_string = "";
  char tmp_char[3];
  for (int x = 0; x < 6; x++) {
    sprintf(tmp_char, "%02d", zes_array[x]);
    zend_string = zend_string + String(tmp_char);
  }
  for (int y = 0; y < 2; y++) {
    for (int x = 0; x < 4; x++) {
      sprintf(tmp_char, "%02d", vier_array[y][x]);
      zend_string = zend_string + String(tmp_char);
    }
  }
  for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      sprintf(tmp_char, "%02d", drie_array[y][x]);
      zend_string = zend_string + String(tmp_char);
    }
  }
  for (int y = 0; y < 4; y++) {
    for (int x = 0; x < 2; x++) {
      sprintf(tmp_char, "%02d", twee_array[y][x]);
      zend_string = zend_string + String(tmp_char);
    }
  }
}

void speler_2_invullen() {
  int tmp = 0;
  for (int x = 0; x < 6; x++) {
    speler_2_zes_array[x] = (ontvangen_schepen_string.substring((tmp * 2), ((tmp * 2) + 2))).toInt();
    speler_2_speelveld_array[speler_2_zes_array[x]] = 600 + x;
    tmp ++;
  }
  for (int y = 0; y < 2; y++) {
    for (int x = 0; x < 4; x++) {
      speler_2_vier_array[y][x] = (ontvangen_schepen_string.substring((tmp * 2), ((tmp * 2) + 2))).toInt();
      speler_2_speelveld_array[speler_2_vier_array[y][x]] = 400 + (10 * y) + x;
      tmp ++;
    }
  } for (int y = 0; y < 3; y++) {
    for (int x = 0; x < 3; x++) {
      speler_2_drie_array[y][x] = (ontvangen_schepen_string.substring((tmp * 2), ((tmp * 2) + 2))).toInt();
      speler_2_speelveld_array[speler_2_drie_array[y][x]] = 300 + (10 * y) + x;
      tmp ++;
    }
  }
  for (int y = 0; y < 4; y++) {
    for (int x = 0; x < 2; x++) {
      speler_2_twee_array[y][x] = (ontvangen_schepen_string.substring((tmp * 2), ((tmp * 2) + 2))).toInt();
      speler_2_speelveld_array[speler_2_twee_array[y][x]] = 200 + (10 * y) + x;
      tmp ++;
    }
  }
}

void omrekenen(int tmp) {
  honderd_int = tmp / 100;
  tien_int = (tmp - (honderd_int * 100)) / 10;
  een_int = tmp - (honderd_int * 100) - (tien_int * 10);
}

void mijn_schepen() {
  tft.fillRect(0, 0, 320, 320, TFT_BLACK);
  kleur_int = TFT_WHITE;
  zeeslag_scherm();
  for (int x = 0; x < 100; x++) {
    if (speelveld_array[x] != 0) {
      omrekenen(speelveld_array[x]);
      switch (tien_int) {
        case 0:
          kleur_int = TFT_YELLOW;
          break;
        case 1:
          kleur_int = TFT_GREEN;
          break;
        case 2:
          kleur_int = TFT_CYAN;
          break;
        case 3:
          kleur_int = TFT_MAGENTA;
      }
      switch (honderd_int) {
        case 2:
          teken_schip(0, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 3:
          teken_schip(1, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 4:
          teken_schip(2, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 6:
          teken_schip(3, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
      }
    }
  }
}

void speler_2_schepen() {
  tft.fillRect(0, 0, 320, 320, TFT_BLACK);
  kleur_int = TFT_WHITE;
  zeeslag_scherm();
  for (int x = 0; x < 100; x++) {
    if (speler_2_speelveld_array[x] != 0) {
      omrekenen(speler_2_speelveld_array[x]);
      switch (tien_int) {
        case 0:
          kleur_int = TFT_YELLOW;
          break;
        case 1:
          kleur_int = TFT_GREEN;
          break;
        case 2:
          kleur_int = TFT_CYAN;
          break;
        case 3:
          kleur_int = TFT_MAGENTA;
      }
      switch (honderd_int) {
        case 2:
          teken_schip(0, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 3:
          teken_schip(1, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 4:
          teken_schip(2, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
        case 6:
          teken_schip(3, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
          break;
      }
    }
  }
}

void mijn_score(){
  for(int x = 0; x < 100; x++){
    switch(mijn_array[x]){
      case 1:
        kleur_int = TFT_WHITE;
        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 2:
        kleur_int = TFT_RED;
        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 3:
        kleur_int = TFT_RED;
        teken_schip(0, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 4:
        kleur_int = TFT_RED;
        teken_schip(1, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 5:
        kleur_int = TFT_RED;
        teken_schip(2, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 6:
        kleur_int = TFT_RED;
        teken_schip(3, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
    }
  }
 }

void speler_2_score(){
  for(int x = 0; x < 100; x++){
    switch(speler_2_array[x]){
      case 1:
        kleur_int = TFT_WHITE;
        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 2:
        kleur_int = TFT_RED;
        teken_schip(4, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 3:
        kleur_int = TFT_RED;
        teken_schip(0, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 4:
        kleur_int = TFT_RED;
        teken_schip(1, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 5:
        kleur_int = TFT_RED;
        teken_schip(2, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
      case 6:
        kleur_int = TFT_RED;
        teken_schip(3, zeeslag_scherm_positie_array[x][0], zeeslag_scherm_positie_array[x][1]);
        break;
    }
  }
}

void zeeslag_scherm_update(){
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if(mijn_beurt_bool){
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
    tft.fillRect(0, 0, 320, 320, TFT_BLACK);
    kleur_int = TFT_WHITE;
    zeeslag_scherm();
    mijn_score();
    while(!ik_ben_klaar_bool){
      mesh.update();
    }
  }
  if(!mijn_beurt_bool){
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
    zend_string = "ok";
    uitsturen();
    mijn_schepen();
    speler_2_score();
    schot_ontvangen_bool = false;
    while(!schot_ontvangen_bool){
      mesh.update();
    }
  }
}

/*
 * SMILEYS
 */
 
void smiley_aantal_ik_begin(){
  spel_gedaan_bool = false;
  smiley_aantal_verzonden_bool = false;
  smiley_aantal_ontvangen_bool = false;
  aantal_smileys_int = 0;
  smileys_verzonden_bool = false;
  smileys_ontvangen_bool = false;
  smiley_keuze_int = 5;
  resultaat_verzonden_bool = false;
  resultaat_ontvangen_bool = false;
  for(int x = 0; x < 121; x++){
    mijn_smiley_array[x] = 0;
    smiley_aantal_buren_array[x] = 0;
    smiley_gedraaid_array[x] = 0;
    speler_2_smiley_array[x] = 0;
    smiley_controle_array[x] = 0;
  }
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(4);
  tft.setTextColor(TFT_GREEN);
  tft.setCursor(0, 20);
  tft.print("Kies  aantal  smileys");
  tft.setTextFont(2);
  tft.setTextColor(TFT_YELLOW);
  tft.setCursor(32, 60);
  tft.print("8");
  tft.setCursor(80, 60);
  tft.print("10");
  tft.setCursor(138, 60);
  tft.print("12");
  tft.setCursor(196, 60);
  tft.print("14");
  tft.setCursor(254, 60);
  tft.print("16");
  tft.setCursor(22, 100);
  tft.print("18");
  tft.setCursor(80, 100);
  tft.print("20");
  tft.setCursor(138, 100);
  tft.print("22");
  tft.setCursor(196, 100);
  tft.print("24");
  tft.setCursor(254, 100);
  tft.print("26");
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(0, 200);
  tft.print("Aantal   :");
  tft.setCursor(0, 360);
  tft.fillRect(140, 420, 50, 40, TFT_WHITE);
  tft.setTextFont(4);
  tft.setTextColor(TFT_BLUE);
  tft.setCursor(147, 430);
  tft.print("OK");
}

void smiley_aantal_ik_begin_niet(){
  spel_gedaan_bool = false;
  smiley_aantal_verzonden_bool = false;
  smiley_aantal_ontvangen_bool = false;
  smileys_verzonden_bool = false;
  smileys_ontvangen_bool = false;
  aantal_smileys_int = 0;
  smiley_keuze_int = 5;
  resultaat_verzonden_bool = false;
  resultaat_ontvangen_bool = false;
  for(int x = 0; x < 121; x++){
    mijn_smiley_array[x] = 0;
    smiley_aantal_buren_array[x] = 0;
    smiley_gedraaid_array[x] = 0;
    speler_2_smiley_array[x] = 0;
    smiley_controle_array[x] = 0;
  }
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(2);
  tft.setTextColor(TFT_GREEN);
  tft.setCursor(0, 60);
  tft.print("Smiley spelinstellingen worden gekozen");
}

void smiley_scherm(){
  smileys_gevonden_bool = true;
  tft.fillScreen(TFT_BLACK);
  for(int x = 0; x < 20; x++){
    tft.drawLine(smiley_scherm_array[x][0], smiley_scherm_array[x][1], smiley_scherm_array[x][2], smiley_scherm_array[x][3], TFT_WHITE);
  }
  smiley_teken_aantal(aantal_smileys_int);
  smileys_nog_te_doen_int = aantal_smileys_int;
  teken_smileys(224, 330, PIJL, TFT_BLUE, TFT_BLUE, TFT_BLUE);
  teken_smileys(256, 330, NADENKEN, TFT_YELLOW, TFT_BLACK, TFT_BLUE);
  teken_smileys(288, 330, KOFFIE, TFT_BROWN, TFT_BLACK, TFT_WHITE);
  smiley_teken_keuze_int();
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
}

void teken_smileys(int x_coor, int y_coor, int welke_int, int kleur_1_int, int kleur_2_int, int kleur_3_int){
  tft.fillRect(x_coor, y_coor, 28, 28, TFT_LIGHTGREY);
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smileys_array[welke_int][0][y][x]) {
        tft.drawPixel(x_coor + x, y_coor + y, kleur_1_int);
      }
    }
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smileys_array[welke_int][1][y][x]) {
        tft.drawPixel(x_coor + x, y_coor + y, kleur_2_int);
      }
    }
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smileys_array[welke_int][2][y][x]) {
        tft.drawPixel(x_coor + x, y_coor + y, kleur_3_int);
      }
    }
  }
}

void smiley_teken_getallen(int x_coor, int y_coor, int getal) {
  kleur_int = TFT_RED;
  if(getal < 5 ){
    kleur_int = TFT_YELLOW;
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[getal][y][x]) {
        tft.drawPixel(x_coor + x, y_coor + y, kleur_int);
      }
    }
  }
}

void smiley_teken_aantal(int aantal_int){
  tft.fillRect(134, 330, 28, 28, TFT_BLACK);
  tft.fillRect(156, 330, 28, 28, TFT_BLACK);
  tft.fillRect(110, 330, 28, 28, TFT_BLACK);
  int tiental_int = int(aantal_int / 10);
  int eenheden_int = aantal_int - (tiental_int * 10);
  if(aantal_int < 0){
    tiental_int = tiental_int * -1;
    eenheden_int = eenheden_int * -1;
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[tiental_int][y][x]) {
        tft.drawPixel(134 + x, 330 + y, TFT_RED);
      }
    }
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[eenheden_int][y][x]) {
        tft.drawPixel(156 + x, 330 + y, TFT_RED);
      }
    }
  }
  if(aantal_int < 0){
    for (int y = 0; y < 28; y++) {
      for (int x = 0; x < 28; x++) {
        if (smiley_getallen_array[10][y][x]) {
          tft.drawPixel(110 + x, 330 + y, TFT_RED);
        }
      }
    }
  }
  if(aantal_int == 0){
    tft.fillRect(140, 420, 50, 40, TFT_WHITE);
    tft.setTextFont(4);
    tft.setTextColor(TFT_BLUE);
    tft.setCursor(147, 430);
    tft.print("OK");
  }
  else{
    tft.fillRect(140, 420, 50, 40, TFT_BLACK);
  }
}

void smiley_teken_keuze_int(){
  if(smiley_keuze_int == 3){
    teken_smileys(4, 330, KOFFIE, TFT_BROWN, TFT_BLACK, TFT_WHITE);
  }
  if(smiley_keuze_int == 4){
    teken_smileys(4, 330, NADENKEN, TFT_YELLOW, TFT_BLACK, TFT_BLUE);
   }
  if(smiley_keuze_int == 5){
    teken_smileys(4, 330, PIJL, TFT_BLUE, TFT_BLUE, TFT_BLUE);
  }
}
  
void smiley_bereken_buren(){
  int aantal_buren = 0;
  for(int x = 0; x < 121; x++){
    for(int y = 0; y < 8; y++){
      if(smiley_buren_array[x][y] != -1){
        if(speler_2_smiley_array[smiley_buren_array[x][y]] == 9){
          aantal_buren ++;
        }
      }
    }
    smiley_aantal_buren_array[x] = aantal_buren;
    aantal_buren = 0;
  }
}

void rij_kolom_array_wissen(){
  for(int x = 0; x < 100; x++){
    smiley_rij_array[x] = 0;
    smiley_kolom_array[x] = 0;
    smiley_diagonaal_array[x] = 0;
  }
  rij_array_teller_int = 0;
  kolom_array_teller_int = 0;
  diagonaal_array_teller_int = 0;
}

void vul_vak(int x_coor, int y_coor){
  tft.fillRect(x_coor, y_coor, 28, 28, TFT_GOLD);
}

void rij_plus(int tmp){
  bool loop = true;
  while(loop){
    smiley_rij_int = int(tmp / 11);
    if((smiley_aantal_buren_array[tmp] == 0) && (smiley_gedraaid_array[tmp] != 2)){
      smiley_gedraaid_array[tmp] = 2;
      kolom_array_teller_int ++;
      smiley_kolom_array[kolom_array_teller_int] = tmp;
      diagonaal_array_teller_int ++;
      smiley_diagonaal_array[diagonaal_array_teller_int] = tmp;
      wacht_25();
      leeg_test(tmp);
      vul_vak(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1]);
    }
    if(smiley_aantal_buren_array[tmp] != 0){
      leeg_test(tmp);
      smiley_teken_getallen(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1], smiley_aantal_buren_array[tmp]);
      smiley_gedraaid_array[tmp] = 2;
      loop = false;
    }
    tmp ++;
    if((tmp > smiley_rij_min_max_array[smiley_rij_int][1]) || (smiley_gedraaid_array[tmp] == 1)){
      loop = false;
    }
  }
}

void rij_min(int tmp){
  bool loop = true;
  while(loop){
    smiley_rij_int = int(tmp / 11);
    if((smiley_aantal_buren_array[tmp] == 0) && (smiley_gedraaid_array[tmp] != 2)){
      smiley_gedraaid_array[tmp] = 2;
      kolom_array_teller_int ++;
      smiley_kolom_array[kolom_array_teller_int] = tmp;
      diagonaal_array_teller_int ++;
      smiley_diagonaal_array[diagonaal_array_teller_int] = tmp;
      wacht_25();
      leeg_test(tmp);
      vul_vak(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1]);
    }
    if(smiley_aantal_buren_array[tmp] != 0){
      leeg_test(tmp);
      smiley_teken_getallen(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1], smiley_aantal_buren_array[tmp]);
      smiley_gedraaid_array[tmp] = 2;
      loop = false;
    }
    tmp --;
    if((tmp < smiley_rij_min_max_array[smiley_rij_int][0]) || (smiley_gedraaid_array[tmp] == 1)){
      loop = false;
    }
  }
}

void kolom_plus(int tmp){
  bool loop = true;
  while(loop){
    smiley_kolom_int = tmp - ((int(tmp / 11)) * 11);
    if((smiley_aantal_buren_array[tmp] == 0) && (smiley_gedraaid_array[tmp] != 2)){
      smiley_gedraaid_array[tmp] = 2;
      rij_array_teller_int ++;
      smiley_rij_array[rij_array_teller_int] = tmp;
      diagonaal_array_teller_int ++;
      smiley_diagonaal_array[diagonaal_array_teller_int] = tmp;
      wacht_25();
      leeg_test(tmp);
      vul_vak(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1]);
    }
    if(smiley_aantal_buren_array[tmp] != 0){
      leeg_test(tmp);
      smiley_teken_getallen(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1], smiley_aantal_buren_array[tmp]);
      smiley_gedraaid_array[tmp] = 2;
      loop = false;
    }
    tmp += 11;
    if((tmp > smiley_kolom_min_max_array[smiley_kolom_int][1]) || (smiley_gedraaid_array[tmp] == 1)){
      loop = false;
    }
  }
}

void kolom_min(int tmp){
  bool loop = true;
  while(loop){
    smiley_kolom_int = tmp - ((int(tmp / 11)) * 11);
    if((smiley_aantal_buren_array[tmp] == 0) && (smiley_gedraaid_array[tmp] != 2)){
      smiley_gedraaid_array[tmp] = 2; 
      rij_array_teller_int ++;
      smiley_rij_array[rij_array_teller_int] = tmp;
      diagonaal_array_teller_int ++;
      smiley_diagonaal_array[diagonaal_array_teller_int] = tmp;
      wacht_25();
      leeg_test(tmp);
      vul_vak(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1]);
    }
    if(smiley_aantal_buren_array[tmp] != 0){
      leeg_test(tmp);
      smiley_teken_getallen(smiley_positie_array[tmp][0], smiley_positie_array[tmp][1], smiley_aantal_buren_array[tmp]);
      smiley_gedraaid_array[tmp] = 2;
      loop = false;
    }
    tmp -= 11;
    if((tmp < smiley_kolom_min_max_array[smiley_kolom_int][0]) || (smiley_gedraaid_array[tmp] == 1)){
      loop = false;
    }
  }
}

void diagonaal(int tmp){
  diagonaal_array_teller_int --;
  for(int x = 0; x < 4; x++){
    if(smiley_buren_array[tmp][x] != -1){
      if((smiley_aantal_buren_array[smiley_buren_array[tmp][x]] == 0) && (smiley_gedraaid_array[smiley_buren_array[tmp][x]] != 2)){
        smiley_gedraaid_array[smiley_buren_array[tmp][x]] = 2; 
        wacht_25();
        leeg_test(smiley_buren_array[tmp][x]);
        vul_vak(smiley_positie_array[smiley_buren_array[tmp][x]][0], smiley_positie_array[smiley_buren_array[tmp][x]][1]);
        rij_array_teller_int ++;
        smiley_rij_array[rij_array_teller_int] = smiley_buren_array[tmp][x];
        kolom_array_teller_int ++;
        smiley_kolom_array[kolom_array_teller_int] = smiley_buren_array[tmp][x];
        diagonaal_array_teller_int ++;
        smiley_diagonaal_array[diagonaal_array_teller_int] = smiley_buren_array[tmp][x];
      }
      if(smiley_aantal_buren_array[smiley_buren_array[tmp][x]] != 0){
        leeg_test(smiley_buren_array[tmp][x]);
        smiley_teken_getallen(smiley_positie_array[smiley_buren_array[tmp][x]][0], smiley_positie_array[smiley_buren_array[tmp][x]][1], smiley_aantal_buren_array[smiley_buren_array[tmp][x]]);
        smiley_gedraaid_array[smiley_buren_array[tmp][x]] = 2; 
      }
    }
  }
}

void smiley_teken_controle(int positie){
  if(smiley_controle_array[positie] == 3){
    teken_smileys(smiley_positie_array[positie][0], smiley_positie_array[positie][1], KOFFIE, TFT_BROWN, TFT_BLACK, TFT_WHITE);
  }
  if(smiley_controle_array[positie] == 4){
    teken_smileys(smiley_positie_array[positie][0], smiley_positie_array[positie][1], NADENKEN, TFT_YELLOW, TFT_BLACK, TFT_BLUE);
  }
}

void smiley_teken_controle_leeg(int positie){
  tft.fillRect(smiley_positie_array[positie][0], smiley_positie_array[positie][1], 28, 28, TFT_BLACK);
}

void leeg_test(int vak_int){
  if(smiley_controle_array[vak_int] != 0){
    tft.fillRect(smiley_positie_array[vak_int][0], smiley_positie_array[vak_int][1], 28, 28, TFT_BLACK);
    if(smiley_controle_array[vak_int] == 3){
      smileys_nog_te_doen_int += 1;
      smiley_teken_aantal(smileys_nog_te_doen_int);
    }
    smiley_controle_array[vak_int] = 0;
  }
}

/*
 * OTHELLO
 */

void othello_level_keuzescherm(){
  tft.fillScreen(TFT_BLACK);
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(4);
  tft.setTextColor(TFT_GREEN);
  tft.setCursor(0, 20);
  tft.print("Kies  gewenst level");
  tft.setTextFont(2);
  tft.setTextColor(TFT_YELLOW);
  tft.setCursor(0, 60);
  tft.print("Beginner");
  tft.setCursor(0, 100);
  tft.print("Pro");
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(0, 200);
  tft.print("Level   :");
  tft.setCursor(65, 200);
  tft.setTextColor(TFT_YELLOW);
  tft.print("Beginner");
  tft.fillRect(140, 420, 50, 40, TFT_WHITE);
  tft.setCursor(0, 360);
  tft.setTextFont(4);
  tft.setTextColor(TFT_BLUE);
  tft.setCursor(147, 430);
  tft.print("OK");
}

void othello_wacht_op_level_scherm(){
  tft.fillScreen(TFT_BLACK);
  tft.setTextFont(2);
  tft.setTextColor(TFT_GREEN);
  tft.setCursor(0, 60);
  tft.print("Beginner / Pro wordt gekozen");
}

void othello_scherm(){
  othello_vak_ontvangen_bool = false;
  spel_gedaan_bool = false;
  for(int x = 0; x < 64; x++){
    othello_speelveld_array[x] = 0;
    othello_controle_array[x] = false;
  }
  tft.fillScreen(TFT_BLACK);
  for(int x = 0; x < 14; x++){
    tft.drawLine(othello_scherm_array[x][0], othello_scherm_array[x][1], othello_scherm_array[x][2], othello_scherm_array[x][3], TFT_WHITE);
  }
  othello_speelveld_array[28] = 1;
  othello_speelveld_array[35] = 1;
  othello_speelveld_array[27] = 2;
  othello_speelveld_array[36] = 2;
  kleur_int = TFT_GOLD;
  tft.fillCircle(othello_positie_array[28][0] + 19, othello_positie_array[28][1] + 19, 13, kleur_int);
  tft.fillCircle(othello_positie_array[35][0] + 19, othello_positie_array[35][1] + 19, 13, kleur_int);
  kleur_int = TFT_WHITE;
  tft.fillCircle(othello_positie_array[27][0] + 19, othello_positie_array[27][1] + 19, 13, kleur_int);
  tft.fillCircle(othello_positie_array[36][0] + 19, othello_positie_array[36][1] + 19, 13, kleur_int);
  tft.setTextFont(2);
  tft.setTextColor(TFT_RED);
  tft.setCursor(10, 430);
  tft.print(mijn_punten_int);
  tft.print(" - ");
  tft.print(speler_2_punten_int);
  tft.setCursor(180, 430);
  tft.setTextColor(TFT_YELLOW);
  if(!othello_level_bool){
    tft.print("Beginner");
  }
  else{
    tft.print("Pro");
  }
  tft.setTextColor(TFT_RED);
  tft.setTextFont(4);
  tft.setCursor(107, 430);
  tft.print(mijn_punten_int);
  if (mijn_beurt_bool) {
    tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
  }
  else {
    tft.fillRect(0, 469, 319, 10, TFT_BLACK);
  }
  if(ik_begin_bool){
    kleur_int = TFT_GOLD;
  }
  else{
    kleur_int = TFT_WHITE;
  }
  tft.fillCircle(280, 440, 20, kleur_int);
}

void wis_keuze_cirkels(){
  for(int x = 0; x < 64; x++){
    if(othello_controle_array[x]){
      tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] + 19, 10, TFT_BLACK);
      tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] +19, 9, TFT_BLACK);
      othello_controle_array[x] = false;
    }
  }
}

void zoek_wit(){
  zwart_zet_mogelijk_bool = false;
  int tmp;
  for(int x = 0; x < 64; x++){
    if(othello_speelveld_array[x] == LEEG){
      for(int y = 0; y < 8; y++){
        bool loop = true;
        if(othello_buren_array[x][y] != -1){
          tmp = othello_buren_array[x][y];
          if(othello_speelveld_array[tmp] != WIT){
            loop = false;
          }
          while(loop){
            if(othello_speelveld_array[tmp] == WIT){
              if(othello_buren_array[tmp][y] == -1){
                loop = false;
              }
              tmp = othello_buren_array[tmp][y];
              if(othello_speelveld_array[tmp] == LEEG){
                loop = false;
              }
              if((othello_speelveld_array[tmp] == ZWART) && (loop)){
                if(!othello_level_bool){
                  tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] + 19, 10, TFT_MAGENTA);
                  tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] +19, 9, TFT_MAGENTA);
                }
                othello_controle_array[x] = true;
                zwart_zet_mogelijk_bool = true;
                loop = false;
              }
            }
          }
        }
      }
    }
  }
}

void zoek_zwart(){
  wit_zet_mogelijk_bool = false;
  int tmp;
  for(int x = 0; x < 64; x++){
    if(othello_speelveld_array[x] == LEEG){
      for(int y = 0; y < 8; y++){
        bool loop = true;
        if(othello_buren_array[x][y] != -1){
          tmp = othello_buren_array[x][y];
          if(othello_speelveld_array[tmp] != ZWART){
            loop = false;
          }
          while(loop){
            if(othello_speelveld_array[tmp] == ZWART){
              if(othello_buren_array[tmp][y] == -1){
                loop = false;
              }
              tmp = othello_buren_array[tmp][y];
              if(othello_speelveld_array[tmp] == LEEG){
                loop = false;
              }
              if((othello_speelveld_array[tmp] == WIT) && (loop)){
                if(!othello_level_bool){
                  tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] + 19, 10, TFT_MAGENTA);
                  tft.drawCircle(othello_positie_array[x][0] + 19, othello_positie_array[x][1] +19, 9, TFT_MAGENTA);
                }
                othello_controle_array[x] = true;
                wit_zet_mogelijk_bool = true;
                loop = false;
              }
            }
          }
        }
      }
    }
  }
}

void zwart_zet_mogelijk(){
  zwart_zet_mogelijk_bool = false;
  int tmp;
  for(int x = 0; x < 64; x++){
    if(othello_speelveld_array[x] == LEEG){
      for(int y = 0; y < 8; y++){
        bool loop = true;
        if(othello_buren_array[x][y] != -1){
          tmp = othello_buren_array[x][y];
          if(othello_speelveld_array[tmp] != WIT){
            loop = false;
          }
          while(loop){
            if(othello_speelveld_array[tmp] == WIT){
              if(othello_buren_array[tmp][y] == -1){
                loop = false;
              }
              tmp = othello_buren_array[tmp][y];
              if(othello_speelveld_array[tmp] == LEEG){
                loop = false;
              }
              if(othello_speelveld_array[tmp] == ZWART){
                zwart_zet_mogelijk_bool = true;
                loop = false;
              }
            }
          }
        }
      }
    }
  }
}

void wit_zet_mogelijk(){
  wit_zet_mogelijk_bool = false;
  int tmp;
  for(int x = 0; x < 64; x++){
    if(othello_speelveld_array[x] == LEEG){
      for(int y = 0; y < 8; y++){
        bool loop = true;
        if(othello_buren_array[x][y] != -1){
          tmp = othello_buren_array[x][y];
          if(othello_speelveld_array[tmp] != ZWART){
            loop = false;
          }
          while(loop){
            if(othello_speelveld_array[tmp] == ZWART){
              if(othello_buren_array[tmp][y] == -1){
                loop = false;
              }
              tmp = othello_buren_array[tmp][y];
              if(othello_speelveld_array[tmp] == LEEG){
                loop = false;
              }
              if(othello_speelveld_array[tmp] == WIT){
                wit_zet_mogelijk_bool = true;
                loop = false;
              }
            }
          }
        }
      }
    }
  }
}

void van_wit_naar_zwart(int x_coor, int y_coor){
  kleur_int = TFT_GOLD;
  for(int x = 3; x < 14; x++){
    tft.fillCircle(x_coor, y_coor, x, kleur_int);
    wacht_25();
  }
}

void van_zwart_naar_wit(int x_coor, int y_coor){
  kleur_int = TFT_WHITE;
  for(int x = 3; x < 14; x++){
    tft.fillCircle(x_coor, y_coor, x, kleur_int);
    wacht_25();
  }
}

void wit_omdraaien(int x){
  int tmp;
  int draai_array[64];
  for(int y = 0; y < 8; y++){
    int teller_int = 0;
    bool loop = true;
    if(othello_buren_array[x][y] != -1){
      tmp = othello_buren_array[x][y];
      if(othello_speelveld_array[tmp] != WIT){
        loop = false;
      }
      while(loop){
        if(othello_speelveld_array[tmp] == WIT){
          draai_array[teller_int] = tmp;
          teller_int ++;
          if(othello_buren_array[tmp][y] == -1){
            loop = false;
            teller_int = 0;
          }
          tmp = othello_buren_array[tmp][y];
          if(othello_speelveld_array[tmp] == LEEG){
            loop = false;
            teller_int = 0;
          }
          if(othello_speelveld_array[tmp] == TEMP){
            loop = false;
            teller_int = 0;
          }
          if(othello_speelveld_array[tmp] == ZWART){
            teller_int --;
            while(teller_int > -1){
              van_wit_naar_zwart(othello_positie_array[draai_array[teller_int]][0] + 19, othello_positie_array[draai_array[teller_int]][1] + 19);
              othello_speelveld_array[draai_array[teller_int]] = TEMP;
              teller_int --;
            }
            loop = false;
          }
        }
      }
    }
  }
  for(int z = 0; z < 64; z++){
    if(othello_speelveld_array[z] == TEMP){
      othello_speelveld_array[z] = ZWART;
    }
  }
}

void zwart_omdraaien(int x){
  int tmp;
  int draai_array[64];
  for(int y = 0; y < 8; y++){
    bool loop = true;
    int teller_int = 0;
    if(othello_buren_array[x][y] != -1){
      tmp = othello_buren_array[x][y];
      if(othello_speelveld_array[tmp] != ZWART){
        loop = false;
      }
      while(loop){
        if(othello_speelveld_array[tmp] == ZWART){
          draai_array[teller_int] = tmp;
          teller_int ++;
          if(othello_buren_array[tmp][y] == -1){
            loop = false;
            teller_int = 0;
          }
          tmp = othello_buren_array[tmp][y];
          if(othello_speelveld_array[tmp] == LEEG){
            loop = false;
            teller_int = 0;
          }
          if(othello_speelveld_array[tmp] == TEMP){
            loop = false;
            teller_int = 0;
          }
          if(othello_speelveld_array[tmp] == WIT){
            teller_int --;
            while(teller_int > -1){
              van_zwart_naar_wit(othello_positie_array[draai_array[teller_int]][0] + 19, othello_positie_array[draai_array[teller_int]][1] + 19);
              othello_speelveld_array[draai_array[teller_int]] = TEMP;
              teller_int --;
            }
            loop = false;
          }
        }
      }
    }
  }
  for(int z = 0; z < 64; z++){
    if(othello_speelveld_array[z] == TEMP){
      othello_speelveld_array[z] = WIT;
    }
  }
}

void othello_teken_aantal(int mijn_aantal_int, int speler_2_aantal_int){
  tft.fillRect(0, 330, 60, 40, TFT_BLACK);
  tft.fillRect(260, 330, 60, 40, TFT_BLACK);
  int kleur_int_1;
  int kleur_int_2;
  int tiental_int = int(mijn_aantal_int / 10);
  int eenheden_int = mijn_aantal_int - (tiental_int * 10);
  if(ik_begin_bool){
    kleur_int_1 = TFT_GOLD;
    kleur_int_2 = TFT_WHITE;
  }
  if(!ik_begin_bool){
    kleur_int_2 = TFT_GOLD;
    kleur_int_1 = TFT_WHITE;
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[tiental_int][y][x]) {
        tft.drawPixel(10 + x, 340 + y, kleur_int_1);
      }
    }
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[eenheden_int][y][x]) {
        tft.drawPixel(32 + x, 340 + y, kleur_int_1);
      }
    }
  }
  tiental_int = int(speler_2_aantal_int / 10);
  eenheden_int = speler_2_aantal_int - (tiental_int * 10);
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[tiental_int][y][x]) {
        tft.drawPixel(268 + x, 340 + y, kleur_int_2);
      }
    }
  }
  for (int y = 0; y < 28; y++) {
    for (int x = 0; x < 28; x++) {
      if (smiley_getallen_array[eenheden_int][y][x]) {
        tft.drawPixel(290 + x, 340 + y, kleur_int_2);
      }
    }
  }
}

/*
   ALL GAMES
*/

void enable_touch_int() {
  attachInterrupt(digitalPinToInterrupt(TOUCH_INT), dummy, FALLING);
  detachInterrupt(digitalPinToInterrupt(TOUCH_INT));
  attachInterrupt(digitalPinToInterrupt(TOUCH_INT), touch, FALLING);
  int_bool = false;
}

void wacht_25(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 25) {
    mesh.update();
  }
}

void wacht_250(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 250) {
    mesh.update();
  }
}

void wacht_500(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 500) {
    mesh.update();
  }
}

void wacht_1s(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 1000) {
    mesh.update();
  }
}

void wacht_2s() {
  wachten_long = millis();
  while ((millis() - wachten_long) < 2000) {
    mesh.update();
  }
}

void wacht_5s() {
  wachten_long = millis();
  while ((millis() - wachten_long) < 5000) {
    mesh.update();
  }
}

void wacht_10s(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 10000) {
    mesh.update();
  }
}

void wacht_20s(){
  wachten_long = millis();
  while ((millis() - wachten_long) < 20000) {
    mesh.update();
  }
}

void uitsturen() {
  mesh.sendBroadcast(zend_string);
}

/*
 * MESH COMMUNICATIE
 */

void receivedCallback( uint32_t from, String &msg ) {
  if ((init_bool) && (!rnd_ontvangen_bool)) {
    rnd_ontvangen_bool = true;
    ontvangen_random_int = msg.toInt();
    zend_string = String(mijn_random_int);
    uitsturen();
  }
  if (!init_bool) {

/*
   TIC TAC TOE
*/

    if (spel_int == 90) {
      ontvangen_positie_int = msg.toInt();
      if (ik_begin_bool) {
        teken_x(positie_array[ontvangen_positie_int][0], positie_array[ontvangen_positie_int][1]);
        veld_array[ontvangen_positie_int] = 5;
      }
      else {
        teken_o(positie_array[ontvangen_positie_int][0], positie_array[ontvangen_positie_int][1]);
        veld_array[ontvangen_positie_int] = 3;
      }
      mijn_beurt_bool = mijn_beurt_bool ^ 1;
      if (mijn_beurt_bool) {
        tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
      }
      else {
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
      }
      controle();
      if (!spel_gedaan_bool) {
        ingevuld();
      }
    }

/*
   VIER OP EEN RIJ
*/

    if (spel_int == 91) {
      ontvangen_positie_int = msg.toInt();
      if (ik_begin_bool) {
        teken_x(positie_4_array[ontvangen_positie_int][0], positie_4_array[ontvangen_positie_int][1]);
        veld_4_array[ontvangen_positie_int] = 5;
      }
      else {
        teken_o(positie_4_array[ontvangen_positie_int][0], positie_4_array[ontvangen_positie_int][1]);
        veld_4_array[ontvangen_positie_int] = 3;
      }
      mijn_beurt_bool = mijn_beurt_bool ^ 1;
      if (mijn_beurt_bool) {
        tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
      }
      else {
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
      }
      controle_4();
      if (!spel_gedaan_bool) {
        ingevuld_4();
      }
    }

/*
   MEMORY SPEL
*/

    if ((spel_int == 92) && (!ik_begin_bool) && (!spel_bezig_bool)) {
      for (int x = 0; x < 15; x++) {
        kleur_rnd_array[x] = msg.substring(x, x + 1).toInt();
      }
      kleuren_ontvangen_bool = true;
    }
    if ((spel_int == 92) && (spel_bezig_bool)) {
      ontvangen_score_int = msg.toInt();
      score_ontvangen_bool = true;
    }

/*
   CONNECT 4
*/

    if (spel_int == 93) {
      rij_int = msg.toInt();
      rij_ontvangen_bool = true;
    }

/*
   MASTERMIND
*/

    if (spel_int == 94) {
      if (!mastermind_kleuren_ontvangen_bool) {
        int x = msg.indexOf(",");
        speler_2_kleuren_array[0] = msg.substring(0, x).toInt();
        int y = msg.indexOf(",", x + 1);
        speler_2_kleuren_array[1] = msg.substring(x + 1, y).toInt();
        x = msg.indexOf(",", y + 1);
        speler_2_kleuren_array[2] = msg.substring(y + 1, x).toInt();
        y = msg.indexOf(",", x + 1);
        speler_2_kleuren_array[3] = msg.substring(x + 1, y).toInt();
        mastermind_kleuren_ontvangen_bool = true;
      }
      if (mastermind_spelen_bool) {
        ontvangen_score_int = msg.toInt();
        mastermind_rij_ontvangen_bool = true;
      }
    }

/*
   PENTAGO
*/

    if (spel_int == 95) {
      ontvangen_positie_int = msg.toInt();
      if ((ontvangen_positie_int > 0) && (ontvangen_positie_int < 37)) {
        vak_1_gekozen_bool = false;
        vak_2_gekozen_bool = false;
        vak_3_gekozen_bool = false;
        vak_4_gekozen_bool = false;
        pijl_links_bool = false;
        pijl_rechts_bool = false;
        if (ik_begin_bool) {
          teken_x(pentago_positie_array[ontvangen_positie_int][0], pentago_positie_array[ontvangen_positie_int][1]);
          pentago_array[ontvangen_positie_int] = 5  ;
        }
        else {
          teken_o(pentago_positie_array[ontvangen_positie_int][0], pentago_positie_array[ontvangen_positie_int][1]);
          pentago_array[ontvangen_positie_int] = 7;
        }
        pentago_controle();
      }
      if (!spel_gedaan_bool) {
        if ((ontvangen_positie_int > 36) && (ontvangen_positie_int < 44)) {
          switch (ontvangen_positie_int) {
            case 37:
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
              break;
            case 38:
              vak_1_gekozen_bool = true;
              keuzevak_1_kleur_int = TFT_RED;
              teken_keuzevak_1();
              break;
            case 39:
              vak_2_gekozen_bool = true;
              keuzevak_2_kleur_int = TFT_GREEN;
              teken_keuzevak_2();
              break;
            case 40:
              vak_3_gekozen_bool = true;
              keuzevak_3_kleur_int = TFT_YELLOW;
              teken_keuzevak_3();
              break;
            case 41:
              vak_4_gekozen_bool = true;
              keuzevak_4_kleur_int = TFT_CYAN;
              teken_keuzevak_4();
              break;
            case 42:
              pijl_links_bool = true;
              teken_pijl_links();
              break;
            case 43:
              pijl_rechts_bool = true;
              teken_pijl_rechts();
              break;
          }
          if (pijl_links_bool) {
            if (vak_1_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_1();
                wacht_250();
                draai_1_links();
                vul_vak_1();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;

            }
            if (vak_2_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_2();
                wacht_250();
                draai_2_links();
                vul_vak_2();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
            if (vak_3_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_3();
                wacht_250();
                draai_3_links();
                vul_vak_3();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
            if (vak_4_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_4();
                wacht_250();
                draai_4_links();
                vul_vak_4();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
          }
          if (pijl_rechts_bool) {
            if (vak_1_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_1();
                wacht_250();
                draai_1_rechts();
                vul_vak_1();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
            if (vak_2_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_2();
                wacht_250();
                draai_2_rechts();
                vul_vak_2();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
            if (vak_3_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_3();
                wacht_250();
                draai_3_rechts();
                vul_vak_3();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
            if (vak_4_gekozen_bool) {
              for (int x = 0; x < 2; x++) {
                wis_vak_4();
                wacht_250();
                draai_4_rechts();
                vul_vak_4();
                wacht_250();
              }
              wis_keuzevakken();
              pentago_controle();
              gedraaid_bool = true;
            }
          }
        }
      }
      if (spel_gedaan_bool) {
        gedraaid_bool = false;
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
        tft.setTextFont(2);
        tft.setCursor(75, 460);
        tft.print("nieuw spel over 5 seconden");
        wacht_5s();
        ik_begin_bool = ik_begin_bool ^ 1;
        pentago_scherm();
      }
      if (gedraaid_bool) {
        gedraaid_bool = false;
        mijn_beurt_bool = mijn_beurt_bool ^ 1;
        if (mijn_beurt_bool) {
          tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
        }
        else {
          tft.fillRect(0, 469, 319, 10, TFT_BLACK);
        }
        pentago_ingevuld();
      }
    }

/*
   SUPER TIC TAC TOE
*/

    if (spel_int == 96) {
      kleur_int = TFT_WHITE;
      int x = msg.substring(0, 1).toInt();
      int y = msg.substring(1, 2).toInt();
      if (ik_begin_bool) {
        super_array[x][y] = 3;
        teken_o(super_positie_array[x][y][0], super_positie_array[x][y][1]);
      }
      else {
        super_array[x][y] = 5;
        teken_x(super_positie_array[x][y][0], super_positie_array[x][y][1]);
      }
      controle_super(x);
      kleur_int = TFT_BLACK;
      super_speelvak();
      super_teken_speelvakken();
      reset_vakken();
      if (vak_klaar_bool[y]) {
        speelvak_int = 9;
        speelvak_bool[9] = true;
      }
      else {
        speelvak_int = y;
        speelvak_bool[y] = true;
      }
      kleur_int = TFT_MAGENTA;
      super_speelvak();
      mijn_beurt_bool = mijn_beurt_bool ^ 1;
      if (mijn_beurt_bool) {
        tft.fillRect(0, 469, 319, 10, TFT_YELLOW);
      }
      else {
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
      }
      if (spel_gedaan_bool) {
        tft.fillRect(0, 469, 319, 10, TFT_BLACK);
        tft.setTextFont(2);
        tft.setCursor(75, 460);
        tft.print("nieuw spel over 5 seconden");
        wacht_5s();
        ik_begin_bool = ik_begin_bool ^ 1;
        super_tic_tac_toe_scherm();
      }
    }

/*
 * ZEESLAG
*/

    if (spel_int == 97) {
      if((mijn_beurt_bool) && (schepen_ontvangen_bool)){
        if(msg == "ok"){
          ik_ben_klaar_bool = true;
        }
      }
      if((!mijn_beurt_bool) && (schepen_verzonden_bool)){
        schot_ontvangen_bool = true;
        ontvangen_int = msg.toInt();
      }
      if (!schepen_ontvangen_bool) {
        ontvangen_schepen_string = "";
        ontvangen_schepen_string = msg;
        speler_2_invullen();
        schepen_ontvangen_bool = true;
      }
    }

/*
 * SMILEYS
 */

    if(spel_int == 98){
      if((!ik_begin_bool) && (smileys_ontvangen_bool) && (!resultaat_ontvangen_bool)){
        smiley_resultaat_string = "";
        smiley_resultaat_string = msg;
        resultaat_ontvangen_bool = true;
        }
      if((!ik_begin_bool) && (smiley_aantal_ontvangen_bool) && (!smileys_ontvangen_bool)){
        for(int x = 0; x < 121; x++){
          speler_2_smiley_array[x] = msg.substring(x, x+1).toInt();
        }
        smileys_ontvangen_bool = true;
        smiley_bereken_buren();
        smiley_scherm();
      }
      if((!ik_begin_bool) && (!smiley_aantal_ontvangen_bool)){
        aantal_smileys_int = msg.substring(0, 2).toInt();
        smiley_aantal_ontvangen_bool = true;
      }
      if((ik_begin_bool) && (resultaat_verzonden_bool) && (!resultaat_ontvangen_bool)){
        smiley_resultaat_string = "";
        smiley_resultaat_string = msg;
        resultaat_ontvangen_bool = true;
      }
    }

/*    
 *     OTHELLO
 */

    if(spel_int == 99){
      if((!mijn_beurt_bool) && (!othello_vak_ontvangen_bool) && ((othello_level_ontvangen_bool) || (othello_level_verzonden_bool))){
        othello_vak_ontvangen_int = msg.toInt();
        othello_vak_ontvangen_bool = true;
      }
      if((!ik_begin_bool) && (!othello_level_ontvangen_bool)){
        othello_level_bool = msg.toInt();
        othello_level_ontvangen_bool = true;
      }
    }
  
/*
 * ONTVANGEN VAN SPELKEUZE
*/

    if (spel_keuze_bool) {
      spel_int = msg.toInt();
      if ((spel_int > 89) && (spel_int < 100)) {
        spel_int_ontvangen_bool = true;
      }
    }
  }
}

void newConnectionCallback(uint32_t nodeId) {
}

void changedConnectionCallback() {
  verbinding_bool = true;
}

void nodeTimeAdjustedCallback(int32_t offset) {
}
